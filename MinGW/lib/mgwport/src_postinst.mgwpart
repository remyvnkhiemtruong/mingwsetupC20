################################################################################
#
# src_postinst.mgwpart - mgwport source post-installation functions
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 Yaakov Selkowitz
# Copyright (C) 2011 Charles Wilson
# Provided by the MinGW project <http://mingw.org/>
#
# mgwport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mgwport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mgwport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

# these are called conditionally by __prepetc
__prep_fonts_dir() {
	fontsdir=$(__mpflavor_prefix)/share/fonts

	find ${D}${fontsdir} -name '*.pcf' -exec gzip -q '{}' +

	dodir $(__mpflavor_sysconfdir)/postinstall

	for d in $(find ${D}${fontsdir}/ -mindepth 1 -type d)
	do
		fonttype=${d#${D}${fontsdir}/}
		fontsubdir=${fontsdir}/${fonttype}

		case ${fonttype} in
		encodings|encodings/large|util) ;;
		*)
			rm -f ${D}${fontsubdir}/encodings.dir ${D}${fontsubdir}/fonts.{dir,scale}

			cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
				/usr/bin/rm -f ${fontsubdir}/encodings.dir ${fontsubdir}/fonts.{dir,scale}
				/usr/bin/mkfontscale ${fontsubdir} || /usr/bin/rm -f ${fontsubdir}/fonts.scale
				/usr/bin/mkfontdir -e ${fontsdir}/encodings -e ${fontsdir}/encodings/large ${fontsubdir} || /usr/bin/rm -f ${fontsubdir}/{encodings,fonts}.dir
				/usr/bin/fc-cache -f ${fontsubdir}

			_EOF
		;;
		esac
	done
}

__prep_freedesktop_mime() {
	local _already_updated_mime_db

	# Freedesktop.org Desktop Menu files with MimeType declarations
	if [ -d ${D}$(__mpflavor_prefix)/share/applications ]
	then
		if [ -n "$(grep -lr MimeType ${D}$(__mpflavor_prefix)/share/applications)" ]
		then
			rm -f ${D}$(__mpflavor_prefix)/share/applications/mimeinfo.cache
			_already_updated_mime_db=1
			dodir $(__mpflavor_sysconfdir)/postinstall
			cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
				if [ -x $(__mpflavor_prefix)/bin/update-desktop-database ]
				then
				    $(__mpflavor_prefix)/bin/update-desktop-database
				fi
				if [ -x $(__mpflavor_prefix)/bin/update-mime-database ]
				then
				    $(__mpflavor_prefix)/bin/update-mime-database $(__mpflavor_prefix)/share/mime
				fi

			_EOF
		fi
	fi

	# Freedesktop.org Shared Mime types
	if [ -d ${D}$(__mpflavor_prefix)/share/mime ]
	then
		# make sure system-generated files aren't clobbered
		find ${D}$(__mpflavor_prefix)/share/mime/ -maxdepth 1 -type f -delete

		if ! defined _already_updated_mime_db
		then
			dodir $(__mpflavor_sysconfdir)/postinstall
			cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
				if [ -x $(__mpflavor_prefix)/bin/update-mime-database ]
				then
				    $(__mpflavor_prefix)/bin/update-mime-database $(__mpflavor_prefix)/share/mime
				fi

			_EOF
		fi
	fi
}

__prep_gconf_schemas() {
	dodir $(__mpflavor_sysconfdir)/postinstall $(__mpflavor_sysconfdir)/preremove

	cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
		export GCONF_CONFIG_SOURCE="$(gconftool-2 --get-default-source)"
	_EOF

	cat >> ${D}$(__mpflavor_sysconfdir)/preremove/${PN}.sh <<-_EOF
		export GCONF_CONFIG_SOURCE="$(gconftool-2 --get-default-source)"
	_EOF

	for schema in ${D}$(__mpflavor_sysconfdir)/gconf/schemas/*.schemas
	do
		cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
			$(__mpflavor_prefix)/bin/gconftool-2 --makefile-install-rule $(__mpflavor_sysconfdir)/gconf/schemas/${schema##*/} > /dev/null 2>&1
		_EOF

		cat >> ${D}$(__mpflavor_sysconfdir)/preremove/${PN}.sh <<-_EOF
			$(__mpflavor_prefix)/bin/gconftool-2 --makefile-uninstall-rule $(__mpflavor_sysconfdir)/gconf/schemas/${schema##*/} > /dev/null 2>&1
		_EOF
	done

	echo >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh
	echo >> ${D}$(__mpflavor_sysconfdir)/preremove/${PN}.sh
}

__prep_gsettings_schemas() {
	dodir $(__mpflavor_sysconfdir)/postinstall
	cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
		$(__mpflavor_prefix)/bin/glib-compile-schemas $(__mpflavor_prefix)/share/glib-2.0/schemas

	_EOF
}

__prep_gio_modules() {
	dodir $(__mpflavor_sysconfdir)/postinstall
	cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
		if [ -x $(__mpflavor_prefix)/bin/gio-querymodules ]
		then
		    $(__mpflavor_prefix)/bin/gio-querymodules $(__mpflavor_prefix)/lib/gio/modules
		fi

		_EOF
}

__prep_gdk_pixbuf_modules() {
	dodir $(__mpflavor_sysconfdir)/postinstall
	cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
		if [ -x $(__mpflavor_prefix)/bin/gdk-pixbuf-query-loaders ]
		then
		    $(__mpflavor_prefix)/bin/gdk-pixbuf-query-loaders --update-cache
		fi

		_EOF
}

__prep_gtk2_modules() {
	# necessary for postinstalling gtk2 itself
	export PKG_CONFIG_PATH="${B}:${PKG_CONFIG_PATH}"
	local gtk_api=$(pkg-config --variable=gtk_binary_version gtk+-x11-2.0)
	local gdkp_moduledir

	# Gdk-Pixbuf loaders
	if [ -d ${D}$(__mpflavor_prefix)/lib/gtk-2.0/${gtk_api}/loaders ]
	then
		if $(pkg-config --atleast-version 2.22 gdk-pixbuf-2.0)
		then
			gdkp_moduledir=/usr/lib/gdk-pixbuf-2.0/$(pkg-config --variable=gdk_pixbuf_binary_version gdk-pixbuf-2.0)/loaders
			dodir ${gdkp_moduledir}
			mv ${D}$(__mpflavor_prefix)/lib/gtk-2.0/${gtk_api}/loaders/* ${D}${gdkp_moduledir}/
			__prep_gdk_pixbuf_modules
		else
			dodir $(__mpflavor_sysconfdir)/postinstall
			cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
				if [ -x $(__mpflavor_prefix)/bin/gdk-pixbuf-query-loaders.exe ]
				then
				    /usr/bin/mkdir -p $(__mpflavor_sysconfdir)/gtk-2.0
				    /usr/bin/chmod 777 $(__mpflavor_sysconfdir)/gtk-2.0
				    $(__mpflavor_prefix)/bin/gdk-pixbuf-query-loaders > $(__mpflavor_sysconfdir)/gtk-2.0/gdk-pixbuf.loaders
				fi

				_EOF
		fi
	fi

	# GTK Immodules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gtk-2.0/${gtk_api}/immodules ]
	then
		dodir $(__mpflavor_sysconfdir)/postinstall
		cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
			if [ -x $(__mpflavor_prefix)/bin/gtk-query-immodules-2.0.exe ]
			then
			    /usr/bin/mkdir -p $(__mpflavor_sysconfdir)/gtk-2.0
			    /usr/bin/chmod 777 $(__mpflavor_sysconfdir)/gtk-2.0
			    $(__mpflavor_prefix)/bin/gtk-query-immodules-2.0 > $(__mpflavor_sysconfdir)/gtk-2.0/gtk.immodules
			fi

		_EOF
	fi
}

__prep_gtk3_modules() {
	# necessary for postinstalling gtk3 itself
	export PKG_CONFIG_PATH="${B}:${PKG_CONFIG_PATH}"
	local gtk_api=$(pkg-config --variable=gtk_binary_version gtk+-x11-3.0)

	# GTK Immodules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gtk-3.0/${gtk_api}/immodules ]
	then
		dodir $(__mpflavor_sysconfdir)/postinstall
		cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
			if [ -x $(__mpflavor_prefix)/bin/gtk-query-immodules-3.0 ]
			then
			    $(__mpflavor_prefix)/bin/gtk-query-immodules-3.0 --update-cache
			fi

			_EOF
	fi
}

__prep_gtk_icon_theme() {
	local icondir

	for icondir in $(find ${D}$(__mpflavor_prefix)/share/icons -mindepth 1 -maxdepth 1 -type d)
	do
		if [ -f ${icondir}/index.theme -o -f ${icondir#${D}}/index.theme ]
		then
			dodir $(__mpflavor_sysconfdir)/postinstall
			cat >> ${D}$(__mpflavor_sysconfdir)/postinstall/${PN}.sh <<-_EOF
				if [ -x $(__mpflavor_prefix)/bin/gtk-update-icon-cache.exe ]
				then
				    $(__mpflavor_prefix)/bin/gtk-update-icon-cache --force ${icondir#${D}}
				fi

			_EOF
		fi
	done
}
# end of conditional __prepetc helpers


# installs standard docs, html docs, and MinGW/MSYS README
__prepdoc() {
	local html;
	local -i n=1;
	local pkg_hint;
	local default_docs="\
		ANNOUNCE ANNOUNCEMENTS AUTHOR AUTHORS \
		BUG-REPORTS BUGS \
		CHANGES Changes ChangeLog CONTRIBUTORS COPYING COPYING-DOCS COPYING.LIB COPYRIGHT CREDITS \
		FAQ GPL HACKING HISTORY HOW-TO-CONTRIBUTE KNOWNBUG \
		LEGAL LICENCE LICENSE MAINTAINERS NEWS NOTES NOTICE \
		PROGLIST README THANKS TODO WHATSNEW";

	cd ${S};

	if defined _MGWPORT_RESTRICT_postinst_doc_
	then
		inform "Skipping package doc installation per request";
	else
		unset _docinto_dir;
		dodoc ${default_docs} ${DOCS};

		for html in ${HTMLDOCS}
		do
			docinto html;
			dodoc ${html};
		done
	fi

	if [ -e ${M}/README ]
	then
		case ${MPFLAVOR} in
		*-*-mingw*) insinto $(__mpflavor_prefix)/share/doc/MinGW ;;
		*-*-msys*)  insinto $(__mpflavor_prefix)/share/doc/MSYS  ;;
		* )         insinto $(__mpflavor_prefix)/share/doc/UNKNOWN ;;
		esac
		newins ${M}/README ${PN}.README.txt;
	elif [ -e ${M}/${PN}.README ]
	then
		case ${MPFLAVOR} in
		*-*-mingw*) insinto $(__mpflavor_prefix)/share/doc/MinGW ;;
		*-*-msys*)  insinto $(__mpflavor_prefix)/share/doc/MSYS  ;;
		* )         insinto $(__mpflavor_prefix)/share/doc/UNKNOWN ;;
		esac
		newins ${M}/${PN}.README ${PN}.README.txt;
	elif [ -e "${S}/MINGW-PATCHES/README" \
		-a "${PN}" == "mgwport" \
		-a "${PS}" == "msys" ]
	then
		# special case for bootstrapping mgwport on msys
		insinto $(__mpflavor_prefix)/share/doc/MSYS
		newins ${S}/MINGW-PATCHES/README ${PN}.README.txt;
	else
		warning "MinGW/MSYS README is missing"
	fi

	pkg_hint=(${PKG_HINTS})

	while defined pkg_name[${n}] && defined pkg_ctype[${n}]
	do
		if [ -f ${M}/${pkg_name[${n}]}-${pkg_name[${n}]}.README ]
		then
			case ${MPFLAVOR} in
			*-*-mingw*) insinto $(__mpflavor_prefix)/share/doc/MinGW ;;
			*-*-msys*)  insinto $(__mpflavor_prefix)/share/doc/MSYS  ;;
			* )         insinto $(__mpflavor_prefix)/share/doc/UNKNOWN ;;
			esac
			doins ${M}/${pkg_name[${n}]}-${pkg_ctype[${n}]}.README;
		fi

		n+=1;
	done
}

# creates and installs postinstall, preremove, and profile.d scripts
__prepetc() {
	local d;
	local f;
	local -i n;
	local s;

	if inherited cross
	then
		# postinst/prerm does not apply to cross-compiles
		return
	fi

	for s in postinstall preremove
	do
		if [ -f ${M}/${s}.sh -a -f ${M}/${PN}.${s} ]
		then
			error "Only one of ${s}.sh and ${PN}.${s} can exist";
		fi

		for f in ${s}.sh ${PN}.${s}
		do
			if [ -f ${M}/${f} ]
			then
				dodir $(__mpflavor_sysconfdir)/${s};
				cat >> ${D}$(__mpflavor_sysconfdir)/${s}/${PN}.sh < ${M}/${f};
			fi
		done

		n=1;
		while [ -n "${pkg_name[${n}]}" ]
		do
			if [ -f ${M}/${pkg_name[${n}]}.${s} ]
			then
				dodir $(__mpflavor_sysconfdir)/${s};
				cat >> ${D}$(__mpflavor_sysconfdir)/${s}/${pkg_name[${n}]}.sh < ${M}/${pkg_name[${n}]}.${s};
			fi
			n+=1
		done
	done

	if [ -f ${M}/profile.d.sh ]
	then
		exeinto $(__mpflavor_sysconfdir)/profile.d;
		newexe ${M}/profile.d.sh ${PN}.sh;
	fi

	if [ -f ${M}/profile.d.csh ]
	then
		exeinto $(__mpflavor_sysconfdir)/profile.d;
		newexe ${M}/profile.d.csh ${PN}.csh;
	fi

	# System fonts
	if [ -d ${D}$(__mpflavor_prefix)/share/fonts ]
	then
		__prep_fonts_dir || error "Fonts postinstall failed"
	fi

	# GIO modules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gio/modules ]
	then
		__prep_gio_modules || error "GIO modules postinstall failed"
	fi

	# GdkPixbuf modules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gdk-pixbuf-2.0 ]
	then
		__prep_gdk_pixbuf_modules || error "GdkPixbuf modules postinstall failed"
	fi

	# GTK+ 2.x modules
	if [ -d ${D}$(__mpflavor_prefix)/share/icons ]
	then
		__prep_gtk_icon_theme || error "GTK+ icon theme postinstall failed"
	fi

	# GTK+ 2.x modules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gtk-2.0 ]
	then
		__prep_gtk2_modules || error "GTK+ modules postinstall failed"
	fi

	# GTK+ 3.x modules
	if [ -d ${D}$(__mpflavor_prefix)/lib/gtk-3.0 ]
	then
		__prep_gtk3_modules || error "GTK+ modules postinstall failed"
	fi

	# GConf schemas
	if [ -d ${D}$(__mpflavor_sysconfdir)/gconf/schemas ] && ! defined _MGWPORT_RESTRICT_postinst_gconf_
	then
		__prep_gconf_schemas || error "GConf schemas postinstall failed"
	fi

	# GSettings schemas
	if [ -d ${D}$(__mpflavor_prefix)/share/glib-2.0/schemas ]
	then
		__prep_gsettings_schemas || error "GSettings schemas postinstall failed"
	fi

	# Freedesktop.org Shared Mime Info
	if [ -d ${D}$(__mpflavor_prefix)/share/applications -o -d ${D}$(__mpflavor_prefix)/share/mime ]
	then
		__prep_freedesktop_mime || error "Shared Mime Info postinstall failed"
	fi

	for d in $(__mpflavor_sysconfdir)/postinstall $(__mpflavor_sysconfdir)/preremove
	do
		if [ -d ${D}${d} ]
		then
			find ${D}${d} -type f -exec chmod 0755 '{}' +;
		fi
	done
}

__prepman() {
	local man manlink manpage;

	if [ -d ${D}$(__mpflavor_prefix)/man ]
	then
		inform "Moving $(__mpflavor_prefix)/man to $(__mpflavor_prefix)/share/man...";
		dodir $(__mpflavor_prefix)/share/man
		# just in case there is already /usr/share/man, e.g. after doman()
		cp -r ${D}$(__mpflavor_prefix)/man/* ${D}$(__mpflavor_prefix)/share/man/
		rm -fr ${D}$(__mpflavor_prefix)/man/
	fi

	if [ -d ${D}$(__host_prefix)/share/man ]
	then
		echo "Compressing man pages:";

		# Since prior to 1.7, files could not ordinarly contain ':', man
		# and perl were patched to substitute '.' for '::'. However,
		# sometimes (e.g. gtk2-perl) man pages created with '::', and
		# with 1.7 it works OOTB, but man is still patched and hence
		# won't find these.
		for man in $(find ${D}$(__host_prefix)/share/man -name '*::*')
		do
			mv ${man} ${man//::/.}
		done

		for manlink in $(find ${D}$(__host_prefix)/share/man -type l)
		do
			manref=$(readlink ${manlink})
			manref=${manref##*/};
			rm -f ${manlink};
			echo ".so ${manref%.gz}" > ${manlink%.gz};
		done

		for manpage in $(find ${D}$(__host_prefix)/share/man -type f ! -name '*.gz' ! -name '*.bz2' ! -name '*.lzma')
		do
			echo "        ${manpage##*/}";
			gzip -q ${manpage};
		done
	fi
}

__prepinfo() {
	local infopage;

	if [ -d ${D}$(__mpflavor_prefix)/info ]
	then
		inform "Moving $(__mpflavor_prefix)/info to $(__mpflavor_prefix)/share/info...";
		dodir $(__mpflavor_prefix)/share/info
		# just in case there is already /usr/share/info
		cp -r ${D}$(__mpflavor_prefix)/info/* ${D}$(__mpflavor_prefix)/share/info/
		rm -fr ${D}$(__mpflavor_prefix)/info/
	fi

	if [ -d ${D}$(__host_prefix)/share/info ]
	then
		rm -f ${D}$(__host_prefix)/share/info/dir
	fi
}

__prepvargames() {
	local f;

	if inherited cross
	then
		# postinst/prerm does not apply to cross-compiles
		return
	fi

	if [ -d ${D}/var/games ]
	then
		for f in $(find ${D}/var/games -type f)
		do
			make_etc_defaults ${f#${D}};
		done
	fi
}

# remove empty directories in D
# if empty directory must remain, call keepdir() in src_install()
__prep_empty_dirs() {
	local d n;

	if defined KEEPDIRS
	then
		keepdir ${KEEPDIRS}
	fi

	# PTC if you find a package deeper than 20 (even perl mods are < 15)
	for (( n=20; n >= 1; n-- ))
	do
		for d in $(find ${D} -mindepth ${n} -type d -empty)
		do
			inform "Removing empty directory: ${d#${D}}";
			rmdir ${d};
		done
	done
}

__prepstrip() {
	local exe;
	local all_exes;
	local strip;

	if defined _MGWPORT_RESTRICT_strip_
	then
		inform "Skipping strip step per request.";
		return 0;
	fi

	cd ${D};

	echo "Stripping executables:";

	# *.so: Apache2 modules, OCaml stublibs, Ruby modules
	# *.oct: Octave modules
	# *.cmxs: OCaml natdynlink modules: http://gallium.inria.fr/~frisch/ndl.txt
	all_exes=$(find * -type f -a \( -name '*.dll' -o -name '*.exe' -o -name '*.so' -o -name '*.so.*' -o -name '*.oct' -o -name '*.cmxs' \))
	# could be .exe from non-automake Makefile which install(1) didn't fix
	all_exes+=" "$(find * -type f -executable ! -name '*.*')

	for exe in ${all_exes}
	do
		# assure this is actually a binary object
		if check_prog ${CTARGET}-strip && ${CTARGET}-size -f ${exe} &>/dev/null
		then
			# for cross-compiled libs, cross-GCC target libs,
			# or non-cross packages built on non-Cygwin systems
			strip="${CTARGET}-strip"
		elif check_prog ${CHOST}-strip && ${CHOST}-size -f ${exe} &>/dev/null
		then
			# for cross-compilers built on non-Cygwin systems
			strip="${CHOST}-strip"
		elif size -f ${exe} &>/dev/null
		then
			strip="strip"
		else
			# sometimes .exe will be appended where it does not belong
			case ${exe} in *.exe)
				if [ $(head -c 2 ${exe}) = "#!" ]
				then
					mv ${exe} ${exe%.exe}
				fi
			esac

			continue
		fi

		# OCaml bytecode must not be stripped
		# Magic number is at end of file:
		# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=256900#74
		# http://cygwin.com/ml/cygwin-apps/2010-10/msg00057.html
		case $(tail -c 12 ${exe}) in
			Caml1999X0[0-9][0-9])  continue ;;
		esac

		# Mono assemblies must not be stripped, but remove .mdb debug symbols,
		# and make them non-executable so they're not launched by MS .NET
		if ${OBJDUMP} -p ${exe} 2>&1 | grep -q "DLL Name: mscoree.dll"
		then
			chmod 0644 ${exe}
			rm -f ${exe}.mdb
			continue
		fi

		# check for .exe from non-automake Makefile which install(1) didn't fix
		# strip(1) used to take care of this, but not anymore
		case ${CHOST} in
		*-*-cygwin*|*-*-mingw*|*-*-msys*)
			case ${exe##*/} in
				*.*) ;;
				*)	mv ${exe} ${exe}.exe
					exe+=.exe ;;
			esac
			;;
		esac

		echo "        ${exe}";
		chmod 0755 ${exe};
		${strip} ${exe};
	done
}

__prepuac() {
	local exe exename;

	# only Windows-hosted binaries need to deal with UAC
	case ${CHOST} in
		*-*-cygwin*|*-*-mingw*|*-*-msys*) ;;
		*)	return ;;
	esac

	cd ${D};

	echo "Preparing executables for UAC:";

	for exe in $(find * -type f -executable -a \( -name '*instal*.exe' -o -name '*patch*.exe' -o -name '*setup*.exe' -o -name '*update*.exe' \))
	do
		exename=${exe##*/};

		# Mono assemblies may already include .manifest files.
		if [ ! -e ${exe}.manifest ]
		then
			echo "        ${exe}";
			sed -e "s|@PKGNAME@|${PN//.}|" \
				-e "s|@APPNAME@|${exename%.exe}|" \
				${_privdatadir}/uac-manifest.in > ${exe}.manifest
			chmod +x ${exe}.manifest
		fi
	done
}

__prep_symlinks() {
	local l l_src

	echo "Fixing symlinks:"

	for l in $(find ${D}/ -type l)
	do
		l_src=$(readlink ${l})

		# avoid .exe suffix in symlinks -- for cygwin
		# http://cygwin.com/ml/cygwin-apps/2007-04/msg00065.html
		case ${CHOST}:${l} in
			*-*-cygwin*:*.exe)
				mv ${l} ${l%.exe};
				l=${l%.exe};
				;;
		esac

		# Require .exe suffix in symlinks -- for mingw and msys
		case ${CHOST}:${l_src} in
			*-*-mingw*:*.exe|*-*-msys*|*.exe)
				case "${l}" in
					*.exe)
						;; # do nothing
					*)
						mv ${l} ${l}.exe;
						l=${l}.exe
						;;
				esac
		esac

		case ${l_src} in
			${l%/*}/${l_src##*/})
				echo "        ${l#${D}}";
				rm -f ${l};
				dosym ${l_src##*/} ${l#${D}};
				;;
			${D}/*)
				echo "        ${l#${D}}";
				rm -f ${l};
				dosym ${l_src#${D}} ${l#${D}};
				;;
			${workdir}/*)
				echo "        ${l#${D}}";
				rm -f ${l};
				cp -LR ${l_src} ${l};
				;;
			/*)
				if [ ! -e ${D}${l_src} ] && [ ! -e ${l_src} ]
				then
					warning "symlink ${l#${D}} points to nonexistant ${l_src}";
					continue
				fi

				# Some systems do not support symlinks
				case ${CHOST} in
				*-*-mingw*|*-*-msys*|*-*-msdos*)
					echo "        ${l#${D}}";
					rm -f ${l};
					cp -LR ${l_src} ${l};
					;;
				esac
				;;
			*)
				if [ ! -e ${l%/*}/${l_src} ]
				then
					warning "symlink ${l#${D}} points to nonexistant ${l_src}";
					continue
				fi

				# Some systems do not support symlinks
				case ${CHOST} in
				*-*-mingw*|*-*-msys*|*-*-msdos*)
					echo "        ${l#${D}}";
					rm -f ${l};
					cp -LR ${l%/*}/${l_src} ${l};
					;;
				esac
				;;
		esac
	done
}

__prep_libtool_modules() {
	local ltlibs ltlibdir ltlibname ltversion ltlocation
	local dlname origdlname library_names old_library inherited_linker_flags \
	      dependency_libs weak_library_names current age revision \
		  installed shouldnotlink dlopen dlpreopen libdir rep_requires

	__maybe_relocate
	pushd ${D}

	ltlibs="$(find * -name '*.la')"

	if ! defined ltlibs
	then
		# nothing to do
		return 0
	fi

	echo "Fixing libtool modules:"
	ltlocation=$(cd /; which libtool) # avoid ./libtool
	ltversion="$(grep '^# libtool (GNU' ${ltlocation} | cut -d ' ' -f 2-)"

	for lib_la in ${ltlibs}
	do
		# check that the file is actually a libtool library
		# e.g. xmodmap.la, where 'la' is a language code
		if ! grep -q "libtool library file" ${lib_la}
		then
			continue
		fi

		source ${lib_la}

		ltlibdir=${lib_la%/*}

		# Before doing anything else, remove references to _RELOCDIR
		if inherited relocatable
		then
			/usr/bin/cat ${lib_la} |\
				/usr/bin/sed -e "s:${_RELOCDIR}::g" >\
				${lib_la}.new && \
			/usr/bin/mv ${lib_la}.new ${lib_la}
		fi

		# check that all library members were installed
		for l in dlname library_names old_library
		do
			if defined ${l}
			then
				# on ELF platforms, there are multiple library_names
				for il in ${!l}
				do
					if [ ! -f ${ltlibdir}/${il} ]
					then
						error "${il} was not installed"
					fi
				done
			fi
		done

		if [ "x${shouldnotlink}" != "xyes" ]
		then
			if [ "x${dlname}" = "x" ]
			then
				# static-only library, hopefully for good reason...
				continue
			fi

			# would otherwise be CHOST, but gcc ships $target libraries
			case ${CTARGET} in
			*-*-cygwin*|*-*-mingw*|*-*-msys*)
				if test ${CTARGET} != ${CHOST} # cross-compiler, use sysroot
				then
					dodir $(__mpflavor_prefix)/${CTARGET}/sys-root/$(__target_prefix)/bin
					mv ${ltlibdir}/${dlname} ${D}$(__mpflavor_prefix)/${CTARGET}/sys-root/$(__target_prefix)/bin/
				else
					origdlname=${dlname}

					while [ $(readlink -f ${ltlibdir}/${dlname%/bin/*}) != ${D}$(__host_prefix) ]
					do
						dlname=../${dlname}
					done

					if [ ${dlname} != ${origdlname} ]
					then
						pushd ${ltlibdir}
						mkdir -p ${dlname%/*}
						mv ${origdlname} ${dlname}
						popd
						echo "        ${lib_la}"
						sed -i -e "s|^\(dlname=\).*|\1'${dlname}'|" ${lib_la}
					fi
				fi
				;;
			esac

			# The rest only applies if shouldnotlink=yes (-module)
			continue
		fi

		echo "        ${lib_la}"

		ltlibname=${lib_la##*/}
		ltlibname=${ltlibname%.la}

		if [ "x${dlname}" = "x" ]
		then
			error "${ltlibname}.la dynamic module was not built"
		fi

		# warn if -avoid-version was not used with -module
		# 99.9% of time should be, but there are notable exceptions
		case "${dlname#../bin/}" in
			cyg${ltlibname#lib}.dll|${ltlibname}.dll|msys-${ltlibname#lib}.dll)	;;
			cyg${ltlibname#lib}.so|${ltlibname}.so|msys-${ltlibname#lib}.so)	;;
			*)	warning "${ltlibname}.la appears to be a versioned module." ;;
		esac

		# static and import libraries are pointless for modules
		rm -f ${ltlibdir}/${ltlibname}.a ${ltlibdir}/${ltlibname}.dll.a

		cat > ${lib_la} <<-_EOF
			# ${ltlibname}.la - a libtool library file
			# Generated by ${ltversion}
			# Modified by mgwport
			#
			# Please DO NOT delete this file!
			# It is necessary for linking the library.

			# The name that we can dlopen(3).
			dlname='${dlname}'

			# Names of this library.
			library_names='${dlname}'

			# The name of the static archive.
			old_library=''

			# Linker flags that can not go in dependency_libs.
			inherited_linker_flags='${inherited_linker_flags}'

			# Libraries that this one depends upon.
			# This is set to empty to speed up lt_dlopen and friends.
			dependency_libs=''

			# Names of additional weak libraries provided by this library
			weak_library_names='${weak_library_names}'

			# Version information for ${ltlibname}.
			current=${current}
			age=${age}
			revision=${revision}

			# Is this an already installed library?
			installed=yes

			# Should we warn about portability when linking against -modules?
			shouldnotlink=yes

			# Files to dlopen/dlpreopen
			dlopen='${dlopen}'
			dlpreopen='${dlpreopen}'

			# Directory that this library needs to be installed in:
			libdir='${libdir}'
			_EOF

		if defined rep_requires
		then
			cat >> ${lib_la} <<-_EOF

				# Librep module dependencies
				rep_requires='${rep_requires}'
				_EOF

			unset rep_requires
		fi
	done

	popd
}

__src_desysroot() {
	local hprefix lprefix
	local pkgcnf pkg_pc
	local ltlibs lib_la
	local t

	if defined _MGWPORT_RESTRICT_desysroot_ ||
	   ! inherited cross
	then
		return
	fi

	hprefix=$(__host_prefix)
	lprefix=$(echo "${hprefix}" | sed -e "s|${CROSS_SYSROOT}||")
	echo "Desysroot: ${hprefix} -> ${lprefix}"

	mkdir -p "${D}${lprefix}"

	for t in "${D}${hprefix}"/*
	do
		cp -fpR "${t}" "${D}${lprefix}/"
		rm -rf "${t}"
	done

	pushd ${D}
	pkgcnf="$(find * -name '*.pc')"
	if defined pkgcnf
	then
		echo "   desysroot pkgconfig:"
		for pkg_pc in ${pkgcnf}
		do
			# check that the file is actually a pkgconfig file
			if ! grep -E -q "^Name:" ${pkg_pc}
			then
				continue
			fi
			echo "      ${pkg_pc}"

			cat ${pkg_pc} | sed -e "s|${hprefix}|${lprefix}|g" >\
				${pkg_pc}.new && mv ${pkg_pc}.new ${pkg_pc}
		done
	fi

       ltlibs="$(find * -name '*.la')"
       if defined ltlibs
       then
		echo "   desysroot libtool modules:"
		for lib_la in ${ltlibs}
		do
			# check that the file is actually a libtool library
			if ! grep -q "libtool library file" ${lib_la}
			then
				continue
			fi
			echo "      ${lib_la}"

			cat ${lib_la} | sed -e "s|${hprefix}|${lprefix}|g" >\
				${lib_la}.new && mv ${lib_la}.new ${lib_la}
		done
	fi
	popd
}

__src_postinst() {
	__prepdoc;
	__prep_symlinks;
	__prepetc;
	__prepman;
	__prepinfo;
	__prepvargames;
	__prep_libtool_modules;
	__prepstrip;
	__prepuac;
	__src_desysroot;
	__prep_empty_dirs;
}

readonly -f __prep_fonts_dir __prep_freedesktop_mime __prep_gconf_schemas \
            __prep_gsettings_schemas __prep_gio_modules __prep_gdk_pixbuf_modules \
            __prep_gtk2_modules __prep_gtk3_modules __prep_gtk_icon_theme \
            __prepdoc __prepetc __prepman __prepinfo __prepvargames __prep_empty_dirs \
            __prepstrip __prepuac __prep_symlinks __prep_libtool_modules \
            __src_desysroot __src_postinst
