################################################################################
#
# syntax.mgwpart - mgwport syntax enhancement functions
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010 Yaakov Selkowitz
# Copyright (C) 2011 Charles Wilson
# Provided by the MinGW project <http://mingw.org/>
#
# mgwport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mgwport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mgwport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#****** Format/Syntax
#  DESCRIPTION
#  This section includes functions which provide some syntactical sugar.
#  These functions can be used anywhere.
#****

#****f* Syntax/defined
#  SYNOPSIS
#  if defined VARIABLE_NAME; then [...]; fi
#  DESCRIPTION
#  Tests if the given variable name is defined.  Returns TRUE if so, else FALSE.
#****
defined() {
	if (( $# != 1 ))
	then
		error "defined accepts exactly one argument"
	fi

	if [ -n "${!1}" ]
	then
		return 0;
	else
		return 1;
	fi
}

#****f* Syntax/pushd
#  SYNOPSIS
#  pushd DIRECTORY
#  DESCRIPTION
#  A silent wrapper for the bash pushd directory stack builtin.
#****
pushd() {
	builtin pushd ${@} > /dev/null
}

#****f* Syntax/popd
#  SYNOPSIS
#  popd
#  DESCRIPTION
#  A silent wrapper for the bash popd directory stack builtin.
#****
popd() {
	builtin popd ${@} > /dev/null
}

#****** Format/Messages
#  DESCRIPTION
#  This section includes functions which provide output to the user.
#  These functions may be used anywhere.
#****

#****f* Messages/error
#  SYNOPSIS
#  error MESSAGE
#  DESCRIPTION
#  Declares a fatal error.  The given message is displayed, then mgwport exits.
#****
error() {
	case $? in
		0) local errorcode=1 ;;
		*) local errorcode=$? ;;
	esac

	echo -e "\e[1;31m*** ERROR:\e[0;0m ${1:-no error message provided}" >&2;
	exit ${errorcode};
}

#****f* Messages/warning
#  SYNOPSIS
#  warning MESSAGE
#  DESCRIPTION
#  Displays a warning message before continuing.
#****
warning() {
	echo -e "\e[1;33m*** Warning:\e[0;0m ${1}" >&2;
}

#****f* Messages/inform
#  SYNOPSIS
#  inform MESSAGE
#  DESCRIPTION
#  Displays an informational message.
#****
inform() {
	echo -e "\e[1;32m*** Info:\e[0;0m ${1}";
}

#****f* Messages/verbose
#  SYNOPSIS
#  verbose COMMAND
#  DESCRIPTION
#  Echoes the given command before executing it.  Returns the exit code of
#  the given command.
#****
verbose() {
	echo "${@}"
	"${@}"
	return $?
}

__stage() {
	echo -e "\e[1;39m>>> ${1} ${PF}\e[0;0m";
}

__step() {
	echo -e ">>> ${1}";
}

__log_init() {
	local log=${1}
	rm -f ${log}

	echo -e mgwport ${_version} '\n' >> ${log}

	for var in PF S B D C T CBUILD CHOST CTARGET CC CFLAGS CPPFLAGS CXX CXXFLAGS \
	           F77 FFLAGS FC FCFLAGS GCJ GCJFLAGS OBJC OBJCFLAGS OBJCXX OBJCXXFLAGS \
	           LDFLAGS LIBS MAKEOPTS
	do
		echo ${var} = ${!var} >> ${log}
	done

	echo -e '\n' >> ${log}
}

#****** Syntax/boolean
#  DESCRIPTION
#  A boolean variable is true if set to one of '1', 'on', 'true', or 'yes',
#  and false if set to one of '0', 'off', 'false', or 'no'.  These values
#  are case-insensitive.
#****
__arg_bool() {
	local ret
	local var=${1}

	case ${!var:-${2}} in
		1|[Yy]|[Yy][Ee][Ss]|[Oo][Nn]|[Tt][Rr][Uu][Ee]) # yes | on | true
			ret=0 ;;
		0|[Nn]|[Nn][Oo]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee]) # no | off | false
			ret=1 ;;
		'')	ret=1 ;;	# unset, assume false
		*)	error "${var}: unknown value: ${!var}" ;;
	esac

	return ${ret}
}

__canonicalize_triplet() {
	local triplet

	if ! triplet=$(${_privgnuconfigdir}/config.sub ${1} 2> /dev/null)
	then
		error "Unknown or invalid system triplet: ${1}"
	fi

	case ${triplet} in
		*-unknown-none)
			triplet=${triplet%-unknown-none} ;;
		*-unknown-*)
			triplet=${triplet/-unknown-/-} ;;
		*-none)
			triplet=${triplet%-none} ;;
	esac

	echo -n ${triplet}
}

__cross_compiling() {
	return $(test ${CBUILD} != ${CHOST} || test ${CHOST} != ${CTARGET})
}

__cross_compiling_error() {
	if __cross_compiling
	then
		error "${BASH_SOURCE[1]##*/} does not yet support cross-compiling"
	fi
}

__host_prefix() {
	local prefix sysroot
	__maybe_relocate

	if inherited cross
	then
		sysroot=${CROSS_SYSROOT}
	else
		sysroot=
	fi

	# FIXME: certainly other exceptions exist?
	case ${CHOST} in
		*-*-mingw*)       prefix=${_RELOCDIR}${sysroot}/mingw ;;
		*)                prefix=${_RELOCDIR}${sysroot}/usr ;;
	esac

	echo -n ${prefix}
}

# Differs from __host_prefix only if !cross, and host is mingw
# In this case, we want to configure with --prefix=<dos style>
# even though for most operations, we will use the "unixish" form
# provided by __host_prefix.
__host_nprefix() {
	local prefix
	__maybe_relocate

	if inherited cross
	then
		__host_prefix
		return
	else
		case "${CHOST}" in
			*-*-mingw*)
				# This should always be 'native' MinGW, but add
				# a special case to handle "cross" builds that
				# don't declare themselves -- specifically for
				# mgwport's own "bootstrap" test.
				if inherited relocatable
				then
					# Can't use windows form of ${_RELOCDIR}/mingw
					# because it MIGHT contain spaces, depending on
					# the value of $TMPDIR.  So, since it doesn't
					# REALLY matter anyway, just punt:
					prefix="$(echo ${_RELOCDIR} | sed -e 's|/tmp|C:/Temp|')/MinGW"
				else
					case $(uname -s) in
						MINGW*) prefix=$(cd /mingw && pwd -W) ;;
						*)      prefix="C:/MinGW" ;;
					esac
				fi
				;;
			*)	__host_prefix ; return ;;
		esac
	fi

	echo -n ${prefix}
}

__host_sysconfdir () {
	local sysconfdir sysroot
	__maybe_relocate

	if inherited cross
	then
		sysroot=${CROSS_SYSROOT}
	else
		sysroot=
	fi

	# FIXME: certainly other exceptions exist?
	case ${CHOST} in
		*-*-mingw*)       sysconfdir=${_RELOCDIR}${sysroot}/mingw/etc ;;
		*)                sysconfdir=${_RELOCDIR}${sysroot}/etc ;;
	esac

	echo -n ${sysconfdir}
}

# Differs from __host_sysconfdir only if !cross, and host is mingw
# In this case, we want to configure with --sysconfdir=<dos style>
# even though for most operations, we will use the "unixish" form
# provided by __host_sysconfdir.
__host_nsysconfdir () {
	local sysconfdir
	__maybe_relocate

	if inherited cross
	then
		__host_sysconfdir
		return
	else
		case "${CHOST}" in
			*-*-mingw*)
				# This should always be 'native' MinGW, but add
				# a special case to handle "cross" builds that
				# don't declare themselves -- specifically for
				# mgwport's own "bootstrap" test.
				if inherited relocatable
				then
					# Can't use windows form of ${_RELOCDIR}/mingw/etc
					# because it MIGHT contain spaces, depending on
					# the value of $TMPDIR.  So, since it doesn't
					# REALLY matter anyway, just punt:
					sysconfdir="$(echo ${_RELOCDIR} | sed -e 's|/tmp|C:/Temp|')/MinGW/etc"
				else
					case $(uname -s) in
						MINGW*) sysconfdir=$(cd /mingw && pwd -W)/etc ;;
						*)      sysconfdir="C:/MinGW/etc" ;;
					esac
				fi
				;;
			*)	__host_sysconfdir; return ;;
		esac
	fi

	echo -n ${sysconfdir}
}

__host_localstatedir () {
	local localstatedir sysroot
	__maybe_relocate

	if inherited cross
	then
		sysroot=${CROSS_SYSROOT}
	else
		sysroot=
	fi

	# FIXME: certainly other exceptions exist?
	case ${CHOST} in
		*-*-mingw*)       localstatedir=${_RELOCDIR}${sysroot}/mingw/var;;
		*)                localstatedir=${_RELOCDIR}${sysroot}/var ;;
	esac

	echo -n ${localstatedir}
}

# Differs from __host_localstatedir only if !cross, and host is mingw
# In this case, we want to configure with --localstatedir=<dos style>
# even though for most operations, we will use the "unixish" form
# provided by __host_localstatedir.
__host_nlocalstatedir () {
	local localstatedir
	__maybe_relocate

	if inherited cross
	then
		__host_localstatedir
		return
	else
		case "${CHOST}" in
			*-*-mingw*)
				# This should always be 'native' MinGW, but add
				# a special case to handle "cross" builds that
				# don't declare themselves -- specifically for
				# mgwport's own "bootstrap" test.
				if inherited relocatable
				then
					# Can't use windows form of ${_RELOCDIR}/mingw/var
					# because it MIGHT contain spaces, depending on
					# the value of $TMPDIR.  So, since it doesn't
					# REALLY matter anyway, just punt:
					localstatedir="$(echo ${_RELOCDIR} | sed -e 's|/tmp|C:/Temp|')/MinGW/var"
				else
					case $(uname -s) in
						MINGW*) localstatedir=$(cd /mingw && pwd -W)/var ;;
						*)      localstatedir="C:/MinGW/var" ;;
					esac
				fi
				;;
			*)	__host_localstatedir; return ;;
		esac
	fi

	echo -n ${localstatedir}
}

__target_prefix() {
	local prefix

	# FIXME: certainly other exceptions exist?
	case ${CTARGET} in
		*-*-mingw*)       prefix=/mingw ;;
		*)                prefix=/usr ;;
	esac

	echo -n ${prefix}
}

#****f* Syntax/__mpflavor_prefix
#  DESCRIPTION
#  Returns the "correct" prefix for package data, given the flavor specified
#  in $MPFLAVOR.  That is, if this script is acting in its "mingw" flavor,
#  then documentation and such will go into /mingw/share/doc/MinGW/,
#  /mingw/share/doc/${PN}, etc.  If it is acting in its "msys" flavor, then
#  that information should be installed into /usr/share/doc/MSYS/ and
#  /usr/share/doc/${PN}, etc.  Note that this is conceptually distinct from
#  items controlled by --prefix; it covers the "metadata" external to the target
#  package's own build system.  Used to generalize the behavior of functions
#  such as 'dodoc' and 'make_etc_defaults'.
#****
__mpflavor_prefix() {
	local prefix
	__maybe_relocate

	case ${MPFLAVOR} in
		*-*-mingw*)       prefix=${_RELOCDIR}/mingw ;;
		*)                prefix=${_RELOCDIR}/usr ;;
	esac
	echo -n ${prefix}
}

#****f* Syntax/__mpflavor_sysconfdir
#  DESCRIPTION
#  Returns the "correct" sysconfdir for package data, given the flavor specified
#  in $MPFLAVOR.  That is, if this script is acting in its "mingw" flavor,
#  then the proper sysconf directory is /mingw/etc; however, if it is acting in
#  its "msys" flavor, then the correct sysconf directory is /etc.  Note that this
#  is conceptually distinct from items controlled by --sysconfdir; it covers the
#  "metadata" external to the target package's own build system.  Used to generalize
#  the behavior of functions such as 'dodoc' and 'make_etc_defaults'.
#****
__mpflavor_sysconfdir() {
	local sysconfdir
	__maybe_relocate

	case ${MPFLAVOR} in
		*-*-mingw*)       sysconfdir=${_RELOCDIR}/mingw/etc ;;
		*)                sysconfdir=${_RELOCDIR}/etc;;
	esac
	echo -n ${sysconfdir}
}

#****f* Syntax/__mpflavor_localstatedir
#  DESCRIPTION
#  Returns the "correct" localstatedir for package data, given the flavor specified
#  in $MPFLAVOR.  That is, if this script is acting in its "mingw" flavor,
#  then the proper statedir is /mingw/var; however, if it is acting in its "msys"
#  flavor, then the correct statedir is /var.  Note that this is conceptually
#  distinct from items controlled by --localstatedir; it covers the "metadata"
#  external to the target package's own build system.
#****
__mpflavor_localstatedir() {
	local localstatedir
	__maybe_relocate

	case ${MPFLAVOR} in
		*-*-mingw*)       localstatedir=${_RELOCDIR}/mingw/var;;
		*)                localstatedir=${_RELOCDIR}/var;;
	esac
	echo -n ${localstatedir}
}


readonly -f defined pushd popd error warning inform verbose __stage __step \
	__log_init __canonicalize_triplet __cross_compiling __cross_compiling_error \
	__host_prefix __target_prefix
readonly -f __mpflavor_prefix __mpflavor_sysconfdir __mpflavor_localstatedir
