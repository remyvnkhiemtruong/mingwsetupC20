################################################################################
#
# pkg_pkg.mgwpart - mgwport packaging functions
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 Yaakov Selkowitz
# Copyright (C) 2011 Charles Wilson
# Provided by the MinGW project <http://mingw.org/>
#
# mgwport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mgwport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mgwport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

declare __pkgid_value=""
__pkg_pkgid() {
	local -i n=$1
	local id=""
	case "${MPFLAVOR}" in
	*mingw* ) id="mingw32";;
	*msys*  ) id="msys";;
	esac
	id="${id}-${pkg_name[$n]}-${pkg_ctype[$n]}"
	__pkgid_value="${id}"
}

declare __pkgname_value=""
__pkg_pkgname() {
	local -i n=$1
	local id=""
	id="${pkg_name[$n]}-${PVR}"
	id="${id}-${PS}${PSV:+-}${PSV}${PSB:+-}${PSB}"
	id="${id}${PRS:+-}${PRS}${PRR:+-}${PRR}"
	id="${id}-${pkg_ctype[$n]}"
	__pkgname_value="$id"
}

declare -a __pkgids
__pkg_pkgids() {
	local -i n=0
	unset __pkgids[*]

	while (( n < pkg_count ))
	do
		__pkg_pkgid $n
		__pkgids[$n]="$__pkgid_value"
		n+=1
	done
}

declare -a __pkgnames
__pkg_pkgnames() {
	local -i n=0
	unset __pkgnames[*]

	while (( n < pkg_count ))
	do
		__pkg_pkgname $n
		__pkgnames[$n]="$__pkgname_value"
		n+=1
	done
}

declare __pkgsrcid=""
__pkg_pkgsrcid() {
	local id=""
	case "${MPFLAVOR}" in
	*mingw* ) id="mingw32";;
	*msys*  ) id="msys";;
	esac
	__pkgsrcid="${id}-${PN}-src"
}

declare __pkgsrcname=""
__pkg_pkgsrcname() {
	local id=""
	id="${PN}-${PVR}"
	id="${id}-${PS}${PSV:+-}${PSV}${PSB:+-}${PSB}"
	id="${id}${PRS:+-}${PRS}${PRR:+-}${PRR}"
	id="${id}-src"
	__pkgsrcname="$id"
}


__pkg_binpkg() {
	local -i n=0;
	local d;
	local pkg_contents;
	local pkg_contents_var;
	local pkg_list;
	__maybe_relocate

	__pkg_pkgids
	__pkg_pkgnames

	pkg_list=(${PKG_LISTS:-${__pkgids[*]}});

	cd ${D};
	__step "Creating binary package(s)";

	# Special handling: for mingw packages, we tar from
	# inside the /mingw directory.  For msys packages, we
	# tar from inside the /usr directory -- but there might
	# be top-level /etc and /var dirs...which we need to
	# relocate underneath /usr.  We do this as part of pkg,
	# not postinstall, so that we can guarantee it is always
	# the VERY last thing before creating the tarballs.
	case "${MPFLAVOR}" in
	*msys*  )
		if inherited relocatable
		then
			pushd ${_RELOCDIR};
		fi
		inform "Rearranging install directory for MSYS"
		# no need to use $(__mpflavor_prefix) since we are
		# already inside an msys case. Besides, it has a
		# leading /.
		for d in *
		do
			if [ "$d" == "usr" ]
			then
				continue
			else
				if [ -e "usr/$d" ]
				then
	# just punt. This should never happen
	error "Can't move $d to usr/$d: already exists"
				fi
				verbose mv "$d" usr/
			fi
		done
		if inherited relocatable
		then
			popd
		fi
		;;
	esac
	# has a leading /, so fake it out...(includes _RELOCDIR):
	cd .$(__mpflavor_prefix)

	if defined PKG_CONTENTS[*]
	then
		while (( n < pkg_count ))
		do
			if [ -f ${M}/${pkg_list[${n}]}.list ]
			then
				PKG_CONTENTS[${n}]=
			fi
			n+=1
		done

		if (( ${#PKG_CONTENTS[*]} != ${pkg_count} ))
		then
			error "PKG_CONTENTS[n] must be defined from 0 through $((pkg_count - 1))"
		fi
	fi

	n=0
	while (( n < pkg_count ))
	do
		__step "${__pkgnames[$n]}.tar.lzma";

		pkg_contents_var=${__pkgids[${n}]//[-+\.]/_}_CONTENTS;

		if defined ${pkg_contents_var}
		then
			pkg_contents=${!pkg_contents_var}
		elif defined PKG_CONTENTS[${n}]
		then
			pkg_contents=${PKG_CONTENTS[${n}]}
		elif [ -f ${M}/${pkg_list[${n}]}.list ]
		then
			pkg_contents=$(cat ${M}/${pkg_list[${n}]}.list)
		elif (( pkg_count == 1 ))
		then
			pkg_contents="*"
		else
			pkg_contents=
		fi

		if defined pkg_contents
		then
			tar --hard-dereference --lzma -cvf ${top}/${__pkgnames[${n}]}.tar.lzma \
				${pkg_contents} \
				|| error "Binary package creation failed: ${__pkgids[${n}]}"
		else
			inform "Creating empty package"
			lzma < /dev/null > ${top}/${__pkgnames[${n}]}.tar.lzma \
				|| error "Empty package creation failed"
		fi
		echo;
		n+=1;
	done
}

__pkg_pkgcheck() {
	local -i n=0;
	local tmp1="${T}/tmptar.log";
	local tmp2="${T}/tmpfind.log";
	__maybe_relocate

	__pkg_pkgids
	__pkg_pkgnames

	cd ${D}$(__mpflavor_prefix); # this includes _RELOCDIR

	__step "Checking packages for missing or duplicate files";

	rm -f ${tmp1} ${tmp2};

	while defined __pkgnames[${n}]
	do
		tar --lzma -tf ${top}/${__pkgnames[${n}]}.tar.lzma | grep -Ev "/$" >> ${tmp1}
		n+=1
	done

	if defined PKG_IGNORE
	then
		find ${PKG_IGNORE} ! -type d >> ${tmp1}
	fi

	sort < ${tmp1} > "${tmp1}.sorted";
	mv -f "${tmp1}.sorted" ${tmp1};

	find * -type f -o -type l | sort > ${tmp2}

	if ! diff -U 0 ${tmp2} ${tmp1} > /dev/null
	then
		# detect duplicates and/or missing files
		diff -U 0 ${tmp2} ${tmp1} | grep -E -v '^(@|\+etc/postinstall/)' > ${T}/pkgcheck.diff

		if grep -E '^-[^\-]' ${T}/pkgcheck.diff > /dev/null
		then
			warning "Packages are missing files:";
			grep -E '^-[^\-]' ${T}/pkgcheck.diff;
	    fi

		if grep -E '^\+[^\+]' ${T}/pkgcheck.diff > /dev/null
		then
			warning "Packages contain duplicate files:";
			grep -E '^\+[^\+]' ${T}/pkgcheck.diff;
			error "Packages contain duplicate files:";
	    fi
	fi

	rm -f ${tmp1} ${tmp2};
}

__pkg_diff() {
	local default_excludes;
	local diff_excludes_x;
	local difflevel;
	local exclude;

	default_excludes="MSYS-PATCHES MINGW-PATCHES aclocal.m4~ aclocal.m4t autom4te.cache
		config.cache config.log config.status
		*SlackBuild* *.egg-info *.dll *.exe *.o *.jpg *.png *.qm *.svgz *.tif
		*.class *.jlc *.pyc *.pyo *.mo *.gmo *.orig *.rej *.spec *.temp *~ *.stackdump";

	if __config_equals with_aclocal 1
	then
		default_excludes+=" aclocal.m4";
	fi

	if __config_equals with_autoconf 1
	then
		default_excludes+=" configure"
	fi

	if __config_equals with_autoheader 1
	then
		# FIXME: get real header names from AC_CONFIG_HEADER
		default_excludes+=" config.h *.h.in"
	fi

	if __config_equals with_automake 1
	then
		default_excludes+=" COPYING INSTALL config-ml.in elisp-comp
			mdate-sh mkinstalldirs py-compile symlink-tree texinfo.tex ylwrap
			Makefile.in GNUmakefile.in makefile.in"
	fi

	if __config_equals with_libtool 1
	then
		default_excludes+=" libtool.m4 ltoptions.m4 ltsugar.m4 ltversion.m4
			lt~obsolete.m4 ltmain.sh"
	fi

	if __config_equals with_libtool 1 || __config_equals with_automake 1
	then
		default_excludes+=" compile config.guess config.sub depcomp install-sh missing"
	fi

	if __config_equals with_gnu_gettext 1 && [ ${PN} != "gettext" ]
	then
		# gettext since 0.18 uses a git archive instead of the previous
		# CVS, so the file list cannot be simply derived from the tarball
		default_excludes+=" ABOUT-NLS config.rpath intl codeset.m4
			fcntl-o.m4 gettext.m4 glibc2.m4 glibc21.m4 iconv.m4
			intdiv0.m4 intl.m4 intldir.m4 intlmacosx.m4 intmax.m4
			inttypes-pri.m4 inttypes_h.m4 lcmessage.m4 lib-ld.m4
			lib-link.m4 lib-prefix.m4 lock.m4 longlong.m4 nls.m4
			po.m4 printf-posix.m4 progtest.m4 size_max.m4 stdint_h.m4
			threadlib.m4 uintmax_t.m4 visibility.m4 wchar_t.m4
			wint_t.m4 xsize.m4 boldquot.sed en@boldquot.header
			en@quot.header insert-header.sin Makefile.in.in
			Makevars.template quot.sed remove-potcdate.sin Rules-quot"
		# gettext-0.15
		default_excludes+=" inttypes-h.m4 longdouble.m4 signed.m4 ulonglong.m4"
	fi

	if __config_equals with_glib_gettext 1
	then
		default_excludes+=" config.rpath Makefile.in.in"
	fi

	# gtk-doc
	if [ -f ${S}/gtk-doc.make -o -f ${S}/common/gtk-doc.mak ]
	then
		default_excludes+=" *.stamp *.html *.bak *.sgml \
			*.tmpl *.txt *.xml *.args *.devhelp* *.css \
			*.hierarchy *.interfaces *.prerequisites *.signals \
			*.png *.top *.bottom gtk-doc.mak* gtk-doc.m4";
	fi

	# GNOME miscellaneous
	if [ "${PN}" != "gnome-common" ]
	then
		default_excludes+=" omf.make xmldocs.make";
	fi

	if [ "${PN}" != "gnome-doc-utils" ]
	then
		default_excludes+=" gnome-doc-utils.make gnome-doc-utils.m4";
	fi

	if [ "${PN}" != "intltool" ]
	then
		default_excludes+=" intltool.m4 intltool-extract intltool-extract.in \
			intltool-merge intltool-merge.in intltool-update intltool-update.in";
	fi

	# KDE3
	if [ -f ${S}/admin/libtool.m4.in ]
	then
		default_excludes+=" libtool.m4.in* configure.bak \
			configure.files acinclude.m4 subdirs";

		if [ -f ${S}/configure.in.in ]
		then
			default_excludes+=" configure.in";
		fi
	fi

	# cd now so that wildcards aren't mistakenly expanded to match files in
	# user's directory
	cd ${workdir};

	for exclude in ${default_excludes}
	do
		diff_excludes_x+=" -x ${exclude}";
	done

	case ${DIFF_EXCLUDES} in
		-x*)
			diff_excludes_x+=" ${DIFF_EXCLUDES}";
			;;
		*)
			for exclude in ${DIFF_EXCLUDES}
			do
				diff_excludes_x+=" -x ${exclude}";
			done
			;;
	esac

	cd ${workdir};

	case "${PS}" in
	mingw32)
		# diff exits >0 when targets differ, hence catch exception with true
		if [ "${SRC_DIR}" = "." ]
		then
			diff -urN \
				${origsrcdir##*/}/MINGW-PATCHES ${srcdir##*/}/MINGW-PATCHES \
				> ${patchdir}/${mgw_patchfile} || true;
			difflevel=1;
		else
			diff -urN \
				${origsrcdir##*/}/${SRC_DIR}/MINGW-PATCHES ${srcdir##*/}/${SRC_DIR}/MINGW-PATCHES \
				> ${patchdir}/${mgw_patchfile} || true;
			difflevel=2;
		fi
		;;
	msys)
		# diff exits >0 when targets differ, hence catch exception with true
		if [ "${SRC_DIR}" = "." ]
		then
			diff -urN \
				${origsrcdir##*/}/MSYS-PATCHES ${srcdir##*/}/MSYS-PATCHES \
				> ${patchdir}/${mgw_patchfile} || true;
			difflevel=1;
		else
			diff -urN \
				${origsrcdir##*/}/${SRC_DIR}/MSYS-PATCHES ${srcdir##*/}/${SRC_DIR}/MSYS-PATCHES \
				> ${patchdir}/${mgw_patchfile} || true;
			difflevel=2;
		fi
		;;
	*) error "Invalid subsystem type '${PS}'" ;;
	esac

	if defined _MGWPORT_RESTRICT_diff_
	then
		rm -f ${patchdir}/${src_patchfile};
		touch ${patchdir}/${src_patchfile};
	else
		diff -uprN ${diff_excludes_x} \
			${origsrcdir##*/} ${srcdir##*/} \
			> ${patchdir}/${src_patchfile} || true;
	fi

	for f in ${patchdir}/${mgw_patchfile} ${patchdir}/${src_patchfile}
	do
		chmod +w "${f}"
		sed -e '/^diff -u/d' < "${f}" > "${f}.new" &&
			mv "${f}.new" "${f}"
	done

	diffstat -p${difflevel} ${patchdir}/${mgw_patchfile} ${patchdir}/${src_patchfile};
}

__gpg_sign() {
	echo "${2} signature needs to be updated";
	rm -f ${1}.sig;
	# we 'check_prog gpg' in __pkg_srcpkg()
	gpg --detach-sign ${1};
}

__pkg_srcpkg() {
	local src spkgdir2;
	__pkg_pkgsrcid
	__pkg_pkgsrcname

	rm -fr ${spkgdir}/*;
	mkdir ${spkgdir}/${__pkgsrcname}
	spkgdir2=${spkgdir}/${__pkgsrcname}

	echo;
	__step "Creating source patches";

	__pkg_diff;

	cp ${patchdir}/${mgw_patchfile} ${spkgdir2};

	if [ "x$(file -b ${patchdir}/${src_patchfile})" != "xempty" ]
	then
		cp ${patchdir}/${src_patchfile} ${spkgdir2};
	fi

	__step "Creating source package";

	case "${PS}" in
	mingw32) cp ${top}/${PF}.mgwport ${spkgdir2};;
	msys)    cp ${top}/${PF}.msysport ${spkgdir2};;
	esac

	for src in ${_src_orig_pkgs} ${_src_orig_patches}
	do
		cp ${top}/${src} ${spkgdir2};
	done

	cd ${spkgdir2};

	if __arg_bool SIG
	then
		if check_prog gpg
		then
			case "${PS}" in
			mingw32) __gpg_sign ${spkgdir2}/${PF}.mgwport "MGWPORT SCRIPT";;
			msys)    __gpg_sign ${spkgdir2}/${PF}.msysport "MGWPORT SCRIPT";;
			esac
			__gpg_sign ${spkgdir2}/${mgw_patchfile} "MINGW/MSYS PATCH";

			if [ -f ${spkgdir}/${src_patchfile} ]
			then
				__gpg_sign ${spkgdir2}/${src_patchfile} "SOURCE PATCH";
			fi
		else
			inform "gnupg must be installed in order to make signatures.";
		fi
	fi

	cd ${spkgdir}
	tar --hard-dereference --lzma -cvf ${top}/${__pkgsrcname}.tar.lzma \
		${__pkgsrcname} || error "Source package creation failed"
}

__pkg_dist() {
	local -i n;
	__pkg_pkgids
	__pkg_pkgnames
	__pkg_pkgsrcid
	__pkg_pkgsrcname

	rm -fr ${distdir}/*;

	cd ${top};

	mkdir -p ${distdir}/${PN};

	cp ${top}/${__pkgsrcname}.tar.lzma ${distdir}/${PN};

	n=0;
	while defined __pkgnames[${n}]
	do
		mkdir -p ${distdir}/${PN};

		cp ${top}/${__pkgnames[${n}]}.tar.lzma ${distdir}/${PN};

		n+=1;
	done
}

# protect functions
readonly -f __pkg_binpkg __pkg_diff __gpg_sign __pkg_srcpkg __pkg_dist
readonly -f __pkg_pkgids __pkg_pkgnames __pkg_pkgsrcid __pkg_pkgsrcname
