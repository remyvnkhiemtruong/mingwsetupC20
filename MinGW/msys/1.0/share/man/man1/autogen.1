.TH AUTOGEN 1 2010-05-08 "(GNU AutoGen 5.10.1)" "Programmer's Manual"
.\"  DO NOT EDIT THIS FILE   (autogen.1)
.\"  
.\"  It has been AutoGen-ed  May , 2010 at  by AutoGen 5.10.1
.\"  From the definitions    ./opts.def
.\"  and the template file   agman1
.\"
.SH NAME
autogen \- The Automated Program Generator
.SH SYNOPSIS
.B autogen
.\" Mixture of short (flag) options and long options
.RB [ \-\fIflag\fP " [\fIvalue\fP]]... [" \--\fIopt-name\fP " [[=| ]\fIvalue\fP]]..."
.br
.in +8
[ <def-file> ]
.PP
AutoGen creates text files from templates using external definitions.
.SH "DESCRIPTION"
This manual page briefly documents the \fBautogen\fP command.
\fBAutoGen\fP is designed for generating program files that contain
repetitive text with varied substitutions.  The goal is to simplify the
maintenance of programs that contain large amounts of repetitious text.
This is especially valuable if there are several blocks of such text
that must be kept synchronized.
.PP
One common example is the problem of maintaining the code required for
processing program options.  Processing options requires a minimum of
four different constructs be kept in proper order in different places
in your program.  You need at least: The flag character in the flag
string, code to process the flag when it is encountered, a global
state variable or two, and a line in the usage text.
You will need more things besides this if you choose to implement
long option names, rc/ini file processing, environment variables
and so on.

All of this can be done mechanically; with the proper templates
and this program.
.SH OPTIONS
.TP
.BR \-L " \fIdir\fP, " \--templ-dirs "=" \fIdir\fP
Template search directory list.
This option may appear an unlimited number of times.
.sp
Add a directory to the list of directories to search when opening
a template, either as the primary template or an included one.
The last entry has the highest priority in the search list.
That is to say, they are searched in reverse order.
.TP
.BR \-T " \fItpl-file\fP, " \--override-tpl "=" \fItpl-file\fP
Override template file.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
Definition files specify the standard template that is to be expanded.
This option will override that name and expand a different template.
.TP
.BR \-l " \fItpl-file\fP, " \--lib-template "=" \fItpl-file\fP
Library template file.
This option may appear an unlimited number of times.
.sp
DEFINE macros are saved from this template file for use in processing
the main macro file.  Template text aside from the DEFINE macros is
is ignored.
.TP
.BR \-b " \fIname\fP, " \--base-name "=" \fIname\fP
Base name for output file(s).
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
A template may specify the exact name of the output file.  Normally,
it does not.  Instead, the name is composed of the base name of the
definitions file with suffixes appended.  This option will override the
base name derived from the definitions file name.  This is required if
there is no definitions file and advisable if definitions are being
read from stdin.  If the definitions are being read from standard in,
the base name defaults to \fIstdin\fP.  Any leading directory components
in the name will be silently removed.  If you wish the output file to
appear in a particular directory, it is recommended that you "cd" into
that directory first, or use directory names in the format specification
for the output suffix lists, @xref{pseudo macro}.
.TP
.BR \--definitions "=\fIfile\fP", " \fB--no-definitions\fP"
Definitions input file.
The \fIno-definitions\fP form will disable the option.
This option is enabled by default.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
Use this argument to specify the input definitions file with a
command line option.  If you do not specify this option, then
there must be a command line argument that specifies the file,
even if only to specify stdin with a hyphen (\fB-\fP).
Specify, \fB--no-definitions\fP when you wish to process
a template without any active AutoGen definitions.\\n
.TP
.BR \-S " \fIfile\fP, " \--load-scheme "=" \fIfile\fP
Scheme code file to load.
.sp
Use this option to pre-load Scheme scripts into the Guile
interpreter before template processing begins.
Please note that the AutoGen specific functions are not loaded
until after argument processing.  So, though they may be specified
in lambda functions you define, they may not be invoked until after
option processing is complete.
.TP
.BR \-F " \fIfile\fP, " \--load-functions "=" \fIfile\fP
Load scheme function library.
.sp
This option is used to load Guile-scheme functions.  The automatically
called initialization routine \fBscm_init\fP must be used to register
these routines or data.  This routine can be generated by using the
following command and the `snarf.tpl' template.  Read the introductory
comment in `snarf.tpl' to see what the `getdefs(1AG)' comment must
contain.

First, create a config file for \fBgetdefs\fP,
and then invoke \fBgetdefs\fP loading that file:
.nf
    cat > getdefs.cfg <<EOF
    subblock    exparg=arg_name,arg_desc,arg_optional,arg_list
    defs-to-get gfunc
    template    snarf
    srcfile
    linenum
    assign      group = name_of_some_group
    assign      init  = _init
    EOF
    
    getdefs load=getdefs.cfg <<source-file-list>>
.fi

Note, however, that your functions must be named:

.nf
    name_of_some_group_scm_<<function_name>>(...)
.fi

so you may wish to use a shorter group name.
.TP
.BR \-s " \fIsuffix\fP, " \--skip-suffix "=" \fIsuffix\fP
Omit the file with this suffix.
This option may appear an unlimited number of times.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
Occasionally, it may not be desirable to produce all of the output
files specified in the template.  (For example, only the \fI.h\fP
header file, but not the \fI.c\fP program text.)  To do this
specify \fB--skip-suffix=c\fP on the command line.
.TP
.BR \-o " \fIsuffix\fP, " \--select-suffix [ =\fIsuffix\fP ]
specify this output suffix.
This option may appear an unlimited number of times.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
If you wish to override the suffix specifications in the template,
you can use one or more copies of this option.  See the suffix
specification in the @ref{pseudo macro} section of the info doc.
.TP
.BR \--source-time, " \fB--no-source-time\fP"
set mod times to latest source.
The \fIno-source-time\fP form will disable the option.
.sp
If you stamp your output files with the `DNE' macro output, then
your output files will always be different, even if the content has
not really changed.  If you use this option, then the modification
time of the output files will change only if the input files change.
This will help reduce unneeded builds.
.TP
.BR \-m ", " \--no-fmemopen
Do not use in-mem streams.
.sp
If the local C library supports "\fBfopencookie(3GNU)\fP", or
"\fBfunopen(3BSD)\fP" then AutoGen prefers to use in-memory stream
buffer opens instead of anonymous files.  This may lead to problems
if there is a shortage of virtual memory.  If, for a particular
application, you run out of memory, then specify this option.
This is unlikely in a modern virtual memory environment.
.TP
.BR \--equate "=\fIchar-list\fP"
characters considered equivalent.
The default \fIchar-list\fP for this option is:
.ti +4
 _-^
.sp
This option will alter the list of characters considered equivalent.
The default are the three characters, "_-^".  (The last is conventional
on a Tandem/HP-NonStop, and I used to do a lot of work on Tandems.)
.TP
.BR \--writable, " \fB--not-writable\fP"
Allow output files to be writable.
The \fInot-writable\fP form will disable the option.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
This option will leave output files writable.
Normally, output files are read-only.
.SS "The following options are often useful while debugging new templates:"
.TP
.BR \--loop-limit "=\fIlim\fP"
Limit on increment loops.
This option takes an integer number as its argument.
The value of \fIlim\fP is constrained to being:
.in +4
.nf
.na
exactly \-1, or
in the range  1 through 0x1000000
.fi
.in -4
The default \fIlim\fP for this option is:
.ti +4
 256
.sp
This option prevents runaway loops.  For example, if you accidentally
specify, "FOR x (for-from 1) (for-to \-1) (for-by 1)", it will take a
long time to finish.  If you do have more than 256 entries in tables,
you will need to specify a new limit with this option.
.TP
.BR \-t " \fItime-lim\fP, " \--timeout "=" \fItime-lim\fP
Time limit for server shell.
This option takes an integer number as its argument.
The value of \fItime-lim\fP is constrained to being:
.in +4
.nf
.na
in the range  0 through 3600
.fi
.in -4
.sp
AutoGen works with a shell server process.  Most normal commands will
complete in less than 10 seconds.  If, however, your commands need more
time than this, use this option.

The valid range is 0 to 3600 seconds (1 hour).
Zero will disable the server time limit.
.TP
.BR \--trace "=\fIlevel\fP"
tracing level of detail.
This option takes a keyword as its argument.  The argument sets an enumeration value that can
be tested by comparing them against the option value macro.
The available keywords are:
.in +4
.nf
.na
nothing       debug-message server-shell
templates     block-macros  expressions
everything
.fi
or their numeric equivalent.
.in -4
.sp
The default \fIlevel\fP for this option is:
.ti +4
 nothing
.sp
This option will cause AutoGen to display a trace of its template
processing.  There are six levels, each level including messages from
the previous levels:

.sp
.IR "nothing"
Does no tracing at all (default)

.sp
.IR "debug-message"
Print messages from the "DEBUG" AutoGen macro (@pxref{DEBUG}).

.sp
.IR "server-shell"
Traces all input and output to the server shell.  This includes a shell
"independent" initialization script about 30 lines long.  Its output is
discarded and not inserted into any template.

.sp
.IR "templates"
Traces the invocation of \fBDEFINE\fPd macros and \fBINCLUDE\fPs

.sp
.IR "block-macros"
Traces all block macros.  The above, plus \fBIF\fP, \fBFOR\fP,
\fBCASE\fP and \fBWHILE\fP.

.sp
.IR "expressions"
Displays the results of expression evaluations.

.sp
.IR "everything"
Displays the invocation of every AutoGen macro, even \fBTEXT\fP macros
(i.e. the text outside of macro quotes).  Additionally, if you rebuild
the ``expr.ini'' file with debugging enabled, then all calls to
AutoGen defined scheme functions will also get logged:
.br
.nf
    cd ${top_builddir}/agen5
    DEBUG_ENABLED=true bash bootstrap.dir expr.ini
    make CFLAGS='-g \-DDEBUG_ENABLED=1'
.fi

Be aware tha tyou cannot rebuild this source in this way without first
having installed the \fBautogen\fP executable in your search path.
Because of this, "expr.ini" is in the distributed source list, and
not in the dependencies.
.br
.TP
.BR \--trace-out "=\fIfile\fP"
tracing output file or filter.
.sp
The output specified may be either a file name, or, if the option
argument begins with the \fBpipe\fP operator (\fB|\fP), a command
that will receive the tracing output as standard in.  For example,
\fB--traceout='| less'\fP will run the trace output through the
\fBless\fP program.  If it begins with a shell append redirection
(\fB>>\fP), the output file will be appended to.
.TP
.BR \--show-defs
Show the definition tree.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
This will print out the complete definition tree before processing
the template.
.TP
.BR \--used-defines
Show the definitions used.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
This will print out the names of definition values searched for
during the processing of the template, whether actually found or
not.  There may be other referenced definitions in a template in
portions of the template not evaluated.  Some of the names listed
may be computed names and others AutoGen macro arguments.  This is
not a means for producing a definitive, all-encompassing list of all
and only the values used from a definition file.  This is intended
as an aid to template documentation only.
.SS "These options can be used to control what gets processed
in the definitions files and template files."
.TP
.BR \-D " \fIvalue\fP, " \--define "=" \fIvalue\fP
name to add to definition list.
This option may appear an unlimited number of times.
.sp
The AutoGen define names are used for the following purposes:

.sp 1
Sections of the AutoGen definitions may be enabled or disabled
by using C-style #ifdef and #ifndef directives.
.sp 1
When defining a value for a name, you may specify the index
for a particular value.  That index may be a literal value,
a define option or a value #define-d in the definitions themselves.
.sp 1
The name of a file may be prefixed with \fB$NAME/\fP.
The \fB$NAME\fP part of the name string will be replaced with
the define-d value for \fBNAME\fP.
.sp 1
When AutoGen is finished loading the definitions, the defined values
are exported to the environment with, \fBputenv(3)\fP.
These values can then be used in shell scripts with \fB${NAME\fP}
references and in templates with \fB(getenv "NAME")\fP.
.sp 1
While processing a template, you may specify an index to retrieve
a specific value.  That index may also be a define-d value.
.br
.TP
.BR \-U " \fIname-pat\fP, " \--undefine "=" \fIname-pat\fP
definition list removal pattern.
This option may appear an unlimited number of times.
This option may not be preset with environment variables
or in initialization (rc) files.
.sp
Just like 'C', AutoGen uses \fB#ifdef/#ifndef\fP preprocessing
directives.  This option will cause the matching names to be
removed from the list of defined values.
.TP
.BR \-? , " \--help"
Display extended usage information and exit.
.TP
.BR \-! , " \--more-help"
Extended usage information passed thru pager.
.TP
.BR \-> " [\fIrcfile\fP]," " \--save-opts" "[=\fIrcfile\fP]"
Save the option state to \fIrcfile\fP.  The default is the \fIlast\fP
configuration file listed in the \fBOPTION PRESETS\fP section, below.
.TP
.BR \-< " \fIrcfile\fP," " \--load-opts" "=\fIrcfile\fP," " \--no-load-opts"
Load options from \fIrcfile\fP.
The \fIno-load-opts\fP form will disable the loading
of earlier RC/INI files.  \fI--no-load-opts\fP is handled early,
out of order.
.TP
.BR \-v " [{\fIv|c|n\fP}]," " \--version" "[=\fI{v|c|n}\fP]"
Output version of program and exit.  The default mode is `v', a simple
version.  The `c' mode will print copyright information and `n' will
print the full copyright notice.
.SH OPTION PRESETS
Any option that is not marked as \fInot presettable\fP may be preset
by loading values from configuration ("RC" or ".INI") file(s) and values from
environment variables named:
.nf
  \fBAUTOGEN_<option-name>\fP or \fBAUTOGEN\fP
.fi
.ad
The environmental presets take precedence (are processed later than)
the configuration files.
The \fIhomerc\fP files are "\fI$HOME\fP", and "\fI.\fP".
If any of these are directories, then the file \fI.autogenrc\fP
is searched for within those directories.
.SH "SEE ALSO"
This program is documented more fully in the
.IR AutoGen
Info system documentation.

.SH "EXAMPLES"
.ti +4
autogen \-T man.tpl \--base-name=autogen opts.def
.sp

This command produced this man page from the AutoGen option definition
file.  It overrides the template specified in \fIopts.def\fP (normally
\fIoptions.tpl\fP) and uses \fIman.tpl\fP.  It also overrides the
\fBbase-name\fP of the output file, which is normally derived from
the input definition file name (viz. \fIopts\fP).
.SH AUTHOR
Bruce Korb
.br
Please send bug reports to:  autogen-users@lists.sourceforge.net

.PP
Released under the GNU General Public License.
.PP
This manual page was \fIAutoGen\fP-erated from the \fBautogen\fP
option definitions.
