This is automake1.4.info, produced by makeinfo version 4.8 from
automake.texi.

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* automake-1.4: (automake1.4).		Making Makefile.in's
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* aclocal-1.4: (automake1.4)Invoking aclocal.          Generating aclocal.m4
END-INFO-DIR-ENTRY

   This file documents GNU automake 1.4-p6

   Copyright (C) 1995, 96, 97, 98 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: automake1.4.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

GNU Automake
************

This file documents the GNU Automake package for creating GNU
Standards-compliant Makefiles from template files.  This edition
documents version 1.4-p6.

* Menu:

* Introduction::                Automake's purpose
* Generalities::                General ideas
* Examples::                    Some example packages
* Invoking Automake::           Creating a Makefile.in
* configure::                   Scanning configure.in
* Top level::                   The top-level Makefile.am
* Programs::                    Building programs and libraries
* Other objects::               Other derived objects
* Other GNU Tools::             Other GNU Tools
* Documentation::               Building documentation
* Install::                     What gets installed
* Clean::                       What gets cleaned
* Dist::                        What goes in a distribution
* Tests::                       Support for test suites
* Options::                     Changing Automake's behavior
* Miscellaneous::               Miscellaneous rules
* Include::                     Including extra files in an Automake template.
* Conditionals::                Conditionals
* Gnits::                       The effect of `--gnu' and `--gnits'
* Cygnus::                      The effect of `--cygnus'
* Extending::                   Extending Automake
* Distributing::                Distributing the Makefile.in
* Future::                      Some ideas for the future
* Macro and Variable Index::
* General Index::


File: automake1.4.info,  Node: Introduction,  Next: Generalities,  Prev: Top,  Up: Top

1 Introduction
**************

Automake is a tool for automatically generating `Makefile.in's from
files called `Makefile.am'.  Each `Makefile.am' is basically a series
of `make' macro definitions (with rules being thrown in occasionally).
The generated `Makefile.in's are compliant with the GNU Makefile
standards.

   The GNU Makefile Standards Document (*note Makefile Conventions:
(standards)Makefile Conventions.)  is long, complicated, and subject to
change.  The goal of Automake is to remove the burden of Makefile
maintenance from the back of the individual GNU maintainer (and put it
on the back of the Automake maintainer).

   The typical Automake input file is simply a series of macro
definitions.  Each such file is processed to create a `Makefile.in'.
There should generally be one `Makefile.am' per directory of a project.

   Automake does constrain a project in certain ways; for instance it
assumes that the project uses Autoconf (*note Introduction:
(autoconf)Top.), and enforces certain restrictions on the
`configure.in' contents.

   Automake requires `perl' in order to generate the `Makefile.in's.
However, the distributions created by Automake are fully GNU
standards-compliant, and do not require `perl' in order to be built.

   Mail suggestions and bug reports for Automake to
<bug-automake@gnu.org>.


File: automake1.4.info,  Node: Generalities,  Next: Examples,  Prev: Introduction,  Up: Top

2 General ideas
***************

The following sections cover a few basic ideas that will help you
understand how Automake works.

* Menu:

* General Operation::           General operation of Automake
* Depth::                       The kinds of packages
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named


File: automake1.4.info,  Node: General Operation,  Next: Depth,  Prev: Generalities,  Up: Generalities

2.1 General Operation
=====================

Automake works by reading a `Makefile.am' and generating a
`Makefile.in'.  Certain macros and targets defined in the `Makefile.am'
instruct Automake to generate more specialized code; for instance, a
`bin_PROGRAMS' macro definition will cause targets for compiling and
linking programs to be generated.

   The macro definitions and targets in the `Makefile.am' are copied
verbatim into the generated file.  This allows you to add arbitrary code
into the generated `Makefile.in'.  For instance the Automake
distribution includes a non-standard `cvs-dist' target, which the
Automake maintainer uses to make distributions from his source control
system.

   Note that GNU make extensions are not recognized by Automake.  Using
such extensions in a `Makefile.am' will lead to errors or confusing
behavior.

   Automake tries to group comments with adjoining targets and macro
definitions in an intelligent way.

   A target defined in `Makefile.am' generally overrides any such
target of a similar name that would be automatically generated by
`automake'.  Although this is a supported feature, it is generally best
to avoid making use of it, as sometimes the generated rules are very
particular.

   Similarly, a macro defined in `Makefile.am' will override any
definition of the macro that `automake' would ordinarily create.  This
feature is more often useful than the ability to override a target
definition.  Be warned that many of the macros generated by `automake'
are considered to be for internal use only, and their names might
change in future releases.

   When examining a macro definition, Automake will recursively examine
macros referenced in the definition.  For example, if Automake is
looking at the content of `foo_SOURCES' in this snippet

     xs = a.c b.c
     foo_SOURCES = c.c $(xs)

   it would use the files `a.c', `b.c', and `c.c' as the contents of
`foo_SOURCES'.

   Automake also allows a form of comment which is _not_ copied into
the output; all lines beginning with `##' are completely ignored by
Automake.

   It is customary to make the first line of `Makefile.am' read:

     ## Process this file with automake to produce Makefile.in


File: automake1.4.info,  Node: Depth,  Next: Strictness,  Prev: General Operation,  Up: Generalities

2.2 Depth
=========

`automake' supports three kinds of directory hierarchy: `flat',
`shallow', and `deep'.

   A "flat" package is one in which all the files are in a single
directory.  The `Makefile.am' for such a package by definition lacks a
`SUBDIRS' macro.  An example of such a package is `termutils'.  

   A "deep" package is one in which all the source lies in
subdirectories; the top level directory contains mainly configuration
information.  GNU `cpio' is a good example of such a package, as is GNU
`tar'.  The top level `Makefile.am' for a deep package will contain a
`SUBDIRS' macro, but no other macros to define objects which are built.

   A "shallow" package is one in which the primary source resides in
the top-level directory, while various parts (typically libraries)
reside in subdirectories.  Automake is one such package (as is GNU
`make', which does not currently use `automake').


File: automake1.4.info,  Node: Strictness,  Next: Uniform,  Prev: Depth,  Up: Generalities

2.3 Strictness
==============

While Automake is intended to be used by maintainers of GNU packages, it
does make some effort to accommodate those who wish to use it, but do
not want to use all the GNU conventions.

   To this end, Automake supports three levels of "strictness"--the
strictness indicating how stringently Automake should check standards
conformance.

   The valid strictness levels are:

`foreign'
     Automake will check for only those things which are absolutely
     required for proper operations.  For instance, whereas GNU
     standards dictate the existence of a `NEWS' file, it will not be
     required in this mode.  The name comes from the fact that Automake
     is intended to be used for GNU programs; these relaxed rules are
     not the standard mode of operation.

`gnu'
     Automake will check--as much as possible--for compliance to the GNU
     standards for packages.  This is the default.

`gnits'
     Automake will check for compliance to the as-yet-unwritten "Gnits
     standards".  These are based on the GNU standards, but are even
     more detailed.  Unless you are a Gnits standards contributor, it is
     recommended that you avoid this option until such time as the Gnits
     standard is actually published.

   For more information on the precise implications of the strictness
level, see *Note Gnits::.


File: automake1.4.info,  Node: Uniform,  Next: Canonicalization,  Prev: Strictness,  Up: Generalities

2.4 The Uniform Naming Scheme
=============================

Automake macros (from here on referred to as _variables_) generally
follow a "uniform naming scheme" that makes it easy to decide how
programs (and other derived objects) are built, and how they are
installed.  This scheme also supports `configure' time determination of
what should be built.

   At `make' time, certain variables are used to determine which
objects are to be built.  These variables are called "primary
variables".  For instance, the primary variable `PROGRAMS' holds a list
of programs which are to be compiled and linked.  

   A different set of variables is used to decide where the built
objects should be installed.  These variables are named after the
primary variables, but have a prefix indicating which standard
directory should be used as the installation directory.  The standard
directory names are given in the GNU standards (*note Directory
Variables: (standards)Directory Variables.).  Automake extends this
list with `pkglibdir', `pkgincludedir', and `pkgdatadir'; these are the
same as the non-`pkg' versions, but with `@PACKAGE@' appended.  For
instance, `pkglibdir' is defined as `$(datadir)/@PACKAGE@'.  

   For each primary, there is one additional variable named by
prepending `EXTRA_' to the primary name.  This variable is used to list
objects which may or may not be built, depending on what `configure'
decides.  This variable is required because Automake must statically
know the entire list of objects that may be built in order to generate
a `Makefile.in' that will work in all cases.

   For instance, `cpio' decides at configure time which programs are
built.  Some of the programs are installed in `bindir', and some are
installed in `sbindir':

     EXTRA_PROGRAMS = mt rmt
     bin_PROGRAMS = cpio pax
     sbin_PROGRAMS = @PROGRAMS@

   Defining a primary variable without a prefix (e.g. `PROGRAMS') is an
error.

   Note that the common `dir' suffix is left off when constructing the
variable names; thus one writes `bin_PROGRAMS' and not
`bindir_PROGRAMS'.

   Not every sort of object can be installed in every directory.
Automake will flag those attempts it finds in error.  Automake will
also diagnose obvious misspellings in directory names.

   Sometimes the standard directories--even as augmented by Automake--
are not enough.  In particular it is sometimes useful, for clarity, to
install objects in a subdirectory of some predefined directory.  To this
end, Automake allows you to extend the list of possible installation
directories.  A given prefix (e.g. `zar') is valid if a variable of the
same name with `dir' appended is defined (e.g. `zardir').

   For instance, until HTML support is part of Automake, you could use
this to install raw HTML documentation:

     htmldir = $(prefix)/html
     html_DATA = automake.html

   The special prefix `noinst' indicates that the objects in question
should not be installed at all.

   The special prefix `check' indicates that the objects in question
should not be built until the `make check' command is run.

   Possible primary names are `PROGRAMS', `LIBRARIES', `LISP',
`SCRIPTS', `DATA', `HEADERS', `MANS', and `TEXINFOS'.  


File: automake1.4.info,  Node: Canonicalization,  Prev: Uniform,  Up: Generalities

2.5 How derived variables are named
===================================

Sometimes a Makefile variable name is derived from some text the user
supplies.  For instance, program names are rewritten into Makefile macro
names.  Automake canonicalizes this text, so that it does not have to
follow Makefile macro naming rules.  All characters in the name except
for letters, numbers, and the underscore are turned into underscores
when making macro references.  For example, if your program is named
`sniff-glue', the derived variable name would be `sniff_glue_SOURCES',
not `sniff-glue_SOURCES'.


File: automake1.4.info,  Node: Examples,  Next: Invoking Automake,  Prev: Generalities,  Up: Top

3 Some example packages
***********************

* Menu:

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* etags::                       Building etags and ctags


File: automake1.4.info,  Node: Complete,  Next: Hello,  Prev: Examples,  Up: Examples

3.1 A simple example, start to finish
=====================================

Let's suppose you just finished writing `zardoz', a program to make
your head float from vortex to vortex.  You've been using Autoconf to
provide a portability framework, but your `Makefile.in's have been
ad-hoc.  You want to make them bulletproof, so you turn to Automake.

   The first step is to update your `configure.in' to include the
commands that `automake' needs.  The simplest way to do this is to add
an `AM_INIT_AUTOMAKE' call just after `AC_INIT':

     AM_INIT_AUTOMAKE(zardoz, 1.0)

   Since your program doesn't have any complicating factors (e.g., it
doesn't use `gettext', it doesn't want to build a shared library),
you're done with this part.  That was easy!

   Now you must regenerate `configure'.  But to do that, you'll need to
tell `autoconf' how to find the new macro you've used.  The easiest way
to do this is to use the `aclocal' program to generate your
`aclocal.m4' for you.  But wait... you already have an `aclocal.m4',
because you had to write some hairy macros for your program.  The
`aclocal' program lets you put your own macros into `acinclude.m4', so
simply rename and then run:

     mv aclocal.m4 acinclude.m4
     aclocal
     autoconf

   Now it is time to write your `Makefile.am' for `zardoz'.  Since
`zardoz' is a user program, you want to install it where the rest of
the user programs go.  Additionally, `zardoz' has some Texinfo
documentation.  Your `configure.in' script uses `AC_REPLACE_FUNCS', so
you need to link against `@LIBOBJS@'.  So here's what you'd write:

     bin_PROGRAMS = zardoz
     zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
     zardoz_LDADD = @LIBOBJS@

     info_TEXINFOS = zardoz.texi

   Now you can run `automake --add-missing' to generate your
`Makefile.in' and grab any auxiliary files you might need, and you're
done!


File: automake1.4.info,  Node: Hello,  Next: etags,  Prev: Complete,  Up: Examples

3.2 A classic program
=====================

GNU hello (ftp://prep.ai.mit.edu/pub/gnu/hello-1.3.tar.gz) is renowned
for its classic simplicity and versatility.  This section shows how
Automake could be used with the GNU Hello package.  The examples below
are from the latest beta version of GNU Hello, but with all of the
maintainer-only code stripped out, as well as all copyright comments.

   Of course, GNU Hello is somewhat more featureful than your
traditional two-liner.  GNU Hello is internationalized, does option
processing, and has a manual and a test suite.  GNU Hello is a deep
package.

   Here is the `configure.in' from GNU Hello:

     dnl Process this file with autoconf to produce a configure script.
     AC_INIT(src/hello.c)
     AM_INIT_AUTOMAKE(hello, 1.3.11)
     AM_CONFIG_HEADER(config.h)

     dnl Set of available languages.
     ALL_LINGUAS="de fr es ko nl no pl pt sl sv"

     dnl Checks for programs.
     AC_PROG_CC
     AC_ISC_POSIX

     dnl Checks for libraries.

     dnl Checks for header files.
     AC_STDC_HEADERS
     AC_HAVE_HEADERS(string.h fcntl.h sys/file.h sys/param.h)

     dnl Checks for library functions.
     AC_FUNC_ALLOCA

     dnl Check for st_blksize in struct stat
     AC_ST_BLKSIZE

     dnl internationalization macros
     AM_GNU_GETTEXT
     AC_OUTPUT([Makefile doc/Makefile intl/Makefile po/Makefile.in \
                src/Makefile tests/Makefile tests/hello],
        [chmod +x tests/hello])

   The `AM_' macros are provided by Automake (or the Gettext library);
the rest are standard Autoconf macros.

   The top-level `Makefile.am':

     EXTRA_DIST = BUGS ChangeLog.O
     SUBDIRS = doc intl po src tests

   As you can see, all the work here is really done in subdirectories.

   The `po' and `intl' directories are automatically generated using
`gettextize'; they will not be discussed here.

   In `doc/Makefile.am' we see:

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   This is sufficient to build, install, and distribute the GNU Hello
manual.

   Here is `tests/Makefile.am':

     TESTS = hello
     EXTRA_DIST = hello.in testdata

   The script `hello' is generated by `configure', and is the only test
case.  `make check' will run this test.

   Last we have `src/Makefile.am', where all the real work is done:

     bin_PROGRAMS = hello
     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
     hello_LDADD = @INTLLIBS@ @ALLOCA@
     localedir = $(datadir)/locale
     INCLUDES = -I../intl -DLOCALEDIR=\"$(localedir)\"


File: automake1.4.info,  Node: etags,  Prev: Hello,  Up: Examples

3.3 Building etags and ctags
============================

Here is another, trickier example.  It shows how to generate two
programs (`ctags' and `etags') from the same source file (`etags.c').
The difficult part is that each compilation of `etags.c' requires
different `cpp' flags.

     bin_PROGRAMS = etags ctags
     ctags_SOURCES =
     ctags_LDADD = ctags.o

     etags.o: etags.c
             $(COMPILE) -DETAGS_REGEXPS -c etags.c

     ctags.o: etags.c
             $(COMPILE) -DCTAGS -o ctags.o -c etags.c

   Note that `ctags_SOURCES' is defined to be empty--that way no
implicit value is substituted.  The implicit value, however, is used to
generate `etags' from `etags.o'.

   `ctags_LDADD' is used to get `ctags.o' into the link line.
`ctags_DEPENDENCIES' is generated by Automake.

   The above rules won't work if your compiler doesn't accept both `-c'
and `-o'.  The simplest fix for this is to introduce a bogus dependency
(to avoid problems with a parallel `make'):

     etags.o: etags.c ctags.o
             $(COMPILE) -DETAGS_REGEXPS -c etags.c

     ctags.o: etags.c
             $(COMPILE) -DCTAGS -c etags.c && mv etags.o ctags.o

   Also, these explicit rules do not work if the de-ANSI-fication
feature is used (*note ANSI::).  Supporting de-ANSI-fication requires a
little more work:

     etags._o: etags._c ctags.o
             $(COMPILE) -DETAGS_REGEXPS -c etags.c

     ctags._o: etags._c
             $(COMPILE) -DCTAGS -c etags.c && mv etags._o ctags.o


File: automake1.4.info,  Node: Invoking Automake,  Next: configure,  Prev: Examples,  Up: Top

4 Creating a `Makefile.in'
**************************

To create all the `Makefile.in's for a package, run the `automake'
program in the top level directory, with no arguments.  `automake' will
automatically find each appropriate `Makefile.am' (by scanning
`configure.in'; *note configure::) and generate the corresponding
`Makefile.in'.  Note that `automake' has a rather simplistic view of
what constitutes a package; it assumes that a package has only one
`configure.in', at the top.  If your package has multiple
`configure.in's, then you must run `automake' in each directory holding
a `configure.in'.

   You can optionally give `automake' an argument; `.am' is appended to
the argument and the result is used as the name of the input file.
This feature is generally only used to automatically rebuild an
out-of-date `Makefile.in'.  Note that `automake' must always be run
from the topmost directory of a project, even if being used to
regenerate the `Makefile.in' in some subdirectory.  This is necessary
because `automake' must scan `configure.in', and because `automake'
uses the knowledge that a `Makefile.in' is in a subdirectory to change
its behavior in some cases.

   `automake' accepts the following options:

`-a'
`--add-missing'
     Automake requires certain common files to exist in certain
     situations; for instance `config.guess' is required if
     `configure.in' runs `AC_CANONICAL_HOST'.  Automake is distributed
     with several of these files; this option will cause the missing
     ones to be automatically added to the package, whenever possible.
     In general if Automake tells you a file is missing, try using this
     option.  By default Automake tries to make a symbolic link
     pointing to its own copy of the missing file; this can be changed
     with `--copy'.

`--amdir=DIR'
     Look for Automake data files in directory DIR instead of in the
     installation directory.  This is typically used for debugging.

`--build-dir=DIR'
     Tell Automake where the build directory is.  This option is used
     when including dependencies into a `Makefile.in' generated by `make
     dist'; it should not be used otherwise.

`-c'

`--copy'
     When used with `--add-missing', causes installed files to be
     copied.  The default is to make a symbolic link.

`--cygnus'
     Causes the generated `Makefile.in's to follow Cygnus rules, instead
     of GNU or Gnits rules.  For more information, see *Note Cygnus::.

`--foreign'
     Set the global strictness to `foreign'.  For more information, see
     *Note Strictness::.

`--gnits'
     Set the global strictness to `gnits'.  For more information, see
     *Note Gnits::.

`--gnu'
     Set the global strictness to `gnu'.  For more information, see
     *Note Gnits::.  This is the default strictness.

`--help'
     Print a summary of the command line options and exit.

`-i'
`--include-deps'
     Include all automatically generated dependency information (*note
     Dependencies::) in the generated `Makefile.in'.  This is generally
     done when making a distribution; see *Note Dist::.

`--generate-deps'
     Generate a file concatenating all automatically generated
     dependency information (*note Dependencies::) into one file,
     `.dep_segment'.  This is generally done when making a
     distribution; see *Note Dist::.  It is useful when maintaining a
     `SMakefile' or makefiles for other platforms (`Makefile.DOS',
     etc.)  It can only be used in conjunction with `--include-deps',
     `--srcdir-name', and `--build-dir'.  Note that if this option is
     given, no other processing is done.

`--no-force'
     Ordinarily `automake' creates all `Makefile.in's mentioned in
     `configure.in'.  This option causes it to only update those
     `Makefile.in's which are out of date with respect to one of their
     dependents.

`-o DIR'
`--output-dir=DIR'
     Put the generated `Makefile.in' in the directory DIR.  Ordinarily
     each `Makefile.in' is created in the directory of the
     corresponding `Makefile.am'.  This option is used when making
     distributions.

`--srcdir-name=DIR'
     Tell Automake the name of the source directory associated with the
     current build.  This option is used when including dependencies
     into a `Makefile.in' generated by `make dist'; it should not be
     used otherwise.

`-v'
`--verbose'
     Cause Automake to print information about which files are being
     read or created.

`--version'
     Print the version number of Automake and exit.


File: automake1.4.info,  Node: configure,  Next: Top level,  Prev: Invoking Automake,  Up: Top

5 Scanning `configure.in'
*************************

Automake scans the package's `configure.in' to determine certain
information about the package.  Some `autoconf' macros are required and
some variables must be defined in `configure.in'.  Automake will also
use information from `configure.in' to further tailor its output.

   Automake also supplies some Autoconf macros to make the maintenance
easier.  These macros can automatically be put into your `aclocal.m4'
using the `aclocal' program.

* Menu:

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros


File: automake1.4.info,  Node: Requirements,  Next: Optional,  Prev: configure,  Up: configure

5.1 Configuration requirements
==============================

The simplest way to meet the basic Automake requirements is to use the
macro `AM_INIT_AUTOMAKE' (*note Macros::).  But if you prefer, you can
do the required steps by hand: 

   * Define the variables `PACKAGE' and `VERSION' with `AC_SUBST'.  `PACKAGE'
     should be the name of the package as it appears when bundled for
     distribution.  For instance, Automake defines `PACKAGE' to be
     `automake'.  `VERSION' should be the version number of the release
     that is being developed.  We recommend that you make
     `configure.in' the only place in your package where the version
     number is defined; this makes releases simpler.

     Automake doesn't do any interpretation of `PACKAGE' or `VERSION',
     except in `Gnits' mode (*note Gnits::).

   * Use the macro `AC_ARG_PROGRAM' if a program or script is installed.
     *Note Transforming Program Names When Installing:
     (autoconf)Transforming Names.  

   * Use `AC_PROG_MAKE_SET' if the package is not flat.  *Note Creating
     Output Files: (autoconf)Output.  

   * Use `AM_SANITY_CHECK' to make sure the build environment is sane.

   * Call `AC_PROG_INSTALL' (*note Particular Program Checks:
     (autoconf)Particular Programs.).  

   * Use `AM_MISSING_PROG' to see whether the programs `aclocal',
     `autoconf', `automake', `autoheader', and `makeinfo' are in the
     build environment.  Here is how this is done:
          missing_dir=`cd $ac_aux_dir && pwd`
          AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
          AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
          AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
          AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)
          AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)

   Here are the other macros which Automake requires but which are not
run by `AM_INIT_AUTOMAKE':

`AC_OUTPUT'
     Automake uses this to determine which files to create (*note
     Creating Output Files: (autoconf)Output.).  Listed files named
     `Makefile' are treated as `Makefile's.  Other listed files are
     treated differently.  Currently the only difference is that a
     `Makefile' is removed by `make distclean', while other files are
     removed by `make clean'.  


File: automake1.4.info,  Node: Optional,  Next: Invoking aclocal,  Prev: Requirements,  Up: configure

5.2 Other things Automake recognizes
====================================

Automake will also recognize the use of certain macros and tailor the
generated `Makefile.in' appropriately.  Currently recognized macros and
their effects are:

`AC_CONFIG_HEADER'
     Automake requires the use of `AM_CONFIG_HEADER', which is similar
     to `AC_CONFIG_HEADER' (*note Configuration Header Files:
     (autoconf)Configuration Headers.), but does some useful
     Automake-specific work.  

`AC_CONFIG_AUX_DIR'
     Automake will look for various helper scripts, such as
     `mkinstalldirs', in the directory named in this macro invocation.
     If not seen, the scripts are looked for in their `standard'
     locations (either the top source directory, or in the source
     directory corresponding to the current `Makefile.am', whichever is
     appropriate).  *Note Finding `configure' Input: (autoconf)Input.  FIXME:
     give complete list of things looked for in this directory

`AC_PATH_XTRA'
     Automake will insert definitions for the variables defined by
     `AC_PATH_XTRA' into each `Makefile.in' that builds a C program or
     library.  *Note System Services: (autoconf)System Services.  

`AC_CANONICAL_HOST'
`AC_CHECK_TOOL'
     Automake will ensure that `config.guess' and `config.sub' exist.
     Also, the `Makefile' variables `host_alias' and `host_triplet' are
     introduced.  See both *Note Getting the Canonical System Type:
     (autoconf)Canonicalizing, and *Note Generic Program Checks:
     (autoconf)Generic Programs.  

`AC_CANONICAL_SYSTEM'
     This is similar to `AC_CANONICAL_HOST', but also defines the
     `Makefile' variables `build_alias' and `target_alias'.  *Note
     Getting the Canonical System Type: (autoconf)Canonicalizing.  

`AC_FUNC_ALLOCA'
`AC_FUNC_GETLOADAVG'
`AC_FUNC_MEMCMP'
`AC_STRUCT_ST_BLOCKS'
`AC_FUNC_FNMATCH'
`AM_FUNC_STRTOD'
`AC_REPLACE_FUNCS'
`AC_REPLACE_GNU_GETOPT'
`AM_WITH_REGEX'
     Automake will ensure that the appropriate dependencies are
     generated for the objects corresponding to these macros.  Also,
     Automake will verify that the appropriate source files are part of
     the distribution.  Note that Automake does not come with any of
     the C sources required to use these macros, so `automake -a' will
     not install the sources.  *Note A Library::, for more information.
     Also, see *Note Particular Function Checks: (autoconf)Particular
     Functions.  

`LIBOBJS'
     Automake will detect statements which put `.o' files into
     `LIBOBJS', and will treat these additional files as if they were
     discovered via `AC_REPLACE_FUNCS'.  *Note Generic Function Checks:
     (autoconf)Generic Functions.  

`AC_PROG_RANLIB'
     This is required if any libraries are built in the package.  *Note
     Particular Program Checks: (autoconf)Particular Programs.  

`AC_PROG_CXX'
     This is required if any C++ source is included.  *Note Particular
     Program Checks: (autoconf)Particular Programs.  

`AC_PROG_F77'
     This is required if any Fortran 77 source is included.  This macro
     is distributed with Autoconf version 2.13 and later.  *Note
     Particular Program Checks: (autoconf)Particular Programs.  

`AC_F77_LIBRARY_LDFLAGS'
     This is required for programs and shared libraries that are a
     mixture of languages that include Fortran 77 (*note Mixing Fortran
     77 With C and C++::).  *Note Autoconf macros supplied with
     Automake: Macros.  

`AM_PROG_LIBTOOL'
     Automake will turn on processing for `libtool' (*note
     Introduction: (libtool)Top.).  

`AC_PROG_YACC'
     If a Yacc source file is seen, then you must either use this macro
     or define the variable `YACC' in `configure.in'.  The former is
     preferred (*note Particular Program Checks: (autoconf)Particular
     Programs.).  

`AC_DECL_YYTEXT'
     This macro is required if there is Lex source in the package.
     *Note Particular Program Checks: (autoconf)Particular Programs.  

`AC_PROG_LEX'
     If a Lex source file is seen, then this macro must be used.  *Note
     Particular Program Checks: (autoconf)Particular Programs.  

`ALL_LINGUAS'
     If Automake sees that this variable is set in `configure.in', it
     will check the `po' directory to ensure that all the named `.po'
     files exist, and that all the `.po' files that exist are named.  

`AM_C_PROTOTYPES'
     This is required when using automatic de-ANSI-fication; see *Note
     ANSI::.  

`AM_GNU_GETTEXT'
     This macro is required for packages which use GNU gettext (*note
     gettext::).  It is distributed with gettext.  If Automake sees
     this macro it ensures that the package meets some of gettext's
     requirements.  

`AM_MAINTAINER_MODE'
     This macro adds a `--enable-maintainer-mode' option to
     `configure'.  If this is used, `automake' will cause
     `maintainer-only' rules to be turned off by default in the
     generated `Makefile.in's.  This macro is disallowed in `Gnits'
     mode (*note Gnits::).  This macro defines the `MAINTAINER_MODE'
     conditional, which you can use in your own `Makefile.am'.  

`AC_SUBST'
`AC_CHECK_TOOL'
`AC_CHECK_PROG'
`AC_CHECK_PROGS'
`AC_PATH_PROG'
`AC_PATH_PROGS'
     For each of these macros, the first argument is automatically
     defined as a variable in each generated `Makefile.in'.  *Note
     Setting Output Variables: (autoconf)Setting Output Variables, and
     *Note Generic Program Checks: (autoconf)Generic Programs.  



File: automake1.4.info,  Node: Invoking aclocal,  Next: Macros,  Prev: Optional,  Up: configure

5.3 Auto-generating aclocal.m4
==============================

Automake includes a number of Autoconf macros which can be used in your
package; some of them are actually required by Automake in certain
situations.  These macros must be defined in your `aclocal.m4';
otherwise they will not be seen by `autoconf'.

   The `aclocal' program will automatically generate `aclocal.m4' files
based on the contents of `configure.in'.  This provides a convenient
way to get Automake-provided macros, without having to search around.
Also, the `aclocal' mechanism is extensible for use by other packages.

   At startup, `aclocal' scans all the `.m4' files it can find, looking
for macro definitions.  Then it scans `configure.in'.  Any mention of
one of the macros found in the first step causes that macro, and any
macros it in turn requires, to be put into `aclocal.m4'.

   The contents of `acinclude.m4', if it exists, are also automatically
included in `aclocal.m4'.  This is useful for incorporating local
macros into `configure'.

   `aclocal' accepts the following options:

`--acdir=DIR'
     Look for the macro files in DIR instead of the installation
     directory.  This is typically used for debugging.

`--help'
     Print a summary of the command line options and exit.

`-I DIR'
     Add the directory DIR to the list of directories searched for
     `.m4' files.

`--output=FILE'
     Cause the output to be put into FILE instead of `aclocal.m4'.

`--print-ac-dir'
     Prints the name of the directory which `aclocal' will search to
     find the `.m4' files.  When this option is given, normal processing
     is suppressed.  This option can be used by a package to determine
     where to install a macro file.

`--verbose'
     Print the names of the files it examines.

`--version'
     Print the version number of Automake and exit.


File: automake1.4.info,  Node: Macros,  Next: Extending aclocal,  Prev: Invoking aclocal,  Up: configure

5.4 Autoconf macros supplied with Automake
==========================================

`AM_CONFIG_HEADER'
     Automake will generate rules to automatically regenerate the config
     header.  If you do use this macro, you must create the file
     `stamp-h.in' in your source directory.  It can be empty.  

`AM_ENABLE_MULTILIB'
     This is used when a "multilib" library is being built.  A
     "multilib" library is one that is built multiple times, once per
     target flag combination.  This is only useful when the library is
     intended to be cross-compiled.  The first optional argument is the
     name of the `Makefile' being generated; it defaults to `Makefile'.
     The second option argument is used to find the top source
     directory; it defaults to the empty string (generally this should
     not be used unless you are familiar with the internals).

`AM_FUNC_STRTOD'
     If the `strtod' function is not available, or does not work
     correctly (like the one on SunOS 5.4), add `strtod.o' to output
     variable `LIBOBJS'.  

`AM_FUNC_ERROR_AT_LINE'
     If the function `error_at_line' is not found, then add `error.o'
     to `LIBOBJS'.  

`AM_FUNC_MKTIME'
     Check for a working `mktime' function.  If not found, add
     `mktime.o' to `LIBOBJS'.  

`AM_FUNC_OBSTACK'
     Check for the GNU obstacks code; if not found, add `obstack.o' to
     `LIBOBJS'.  

`AM_C_PROTOTYPES'
     Check to see if function prototypes are understood by the
     compiler.  If so, define `PROTOTYPES' and set the output variables
     `U' and `ANSI2KNR' to the empty string.  Otherwise, set `U' to `_'
     and `ANSI2KNR' to `./ansi2knr'.  Automake uses these values to
     implement automatic de-ANSI-fication.  

`AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL'
     If the use of `TIOCGWINSZ' requires `<sys/ioctl.h>', then define
     `GWINSZ_IN_SYS_IOCTL'.  Otherwise `TIOCGWINSZ' can be found in
     `<termios.h>'.  

`AM_INIT_AUTOMAKE'
     Runs many macros that most `configure.in''s need.  This macro has
     two required arguments, the package and the version number.  By
     default this macro `AC_DEFINE''s `PACKAGE' and `VERSION'.  This
     can be avoided by passing in a non-empty third argument.

`AM_PATH_LISPDIR'
     Searches for the program `emacs', and, if found, sets the output
     variable `lispdir' to the full path to Emacs' site-lisp directory.  

`AM_PROG_CC_STDC'
     If the C compiler in not in ANSI C mode by default, try to add an
     option to output variable `CC' to make it so.  This macro tries
     various options that select ANSI C on some system or another.  It
     considers the compiler to be in ANSI C mode if it handles function
     prototypes correctly.

     If you use this macro, you should check after calling it whether
     the C compiler has been set to accept ANSI C; if not, the shell
     variable `am_cv_prog_cc_stdc' is set to `no'.  If you wrote your
     source code in ANSI C, you can make an un-ANSIfied copy of it by
     using the `ansi2knr' option (*note ANSI::).

`AM_PROG_LEX'
     Like `AC_PROG_LEX' with `AC_DECL_YYTEXT' (*note Particular Program
     Checks: (autoconf)Particular Programs.), but uses the `missing'
     script on systems that do not have `lex'.  `HP-UX 10' is one such
     system.

`AM_SANITY_CHECK'
     This checks to make sure that a file created in the build
     directory is newer than a file in the source directory.  This can
     fail on systems where the clock is set incorrectly.  This macro is
     automatically run from `AM_INIT_AUTOMAKE'.

`AM_SYS_POSIX_TERMIOS'
     Check to see if POSIX termios headers and functions are available
     on the system.  If so, set the shell variable
     `am_cv_sys_posix_termios' to `yes'.  If not, set the variable to
     `no'.

`AM_TYPE_PTRDIFF_T'
     Define `HAVE_PTRDIFF_T' if the type `ptrdiff_t' is defined in
     `<stddef.h>'.

`AM_WITH_DMALLOC'
     Add support for the dmalloc
     (ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz) package.  If
     the user configures with `--with-dmalloc', then define
     `WITH_DMALLOC' and add `-ldmalloc' to `LIBS'.

`AM_WITH_REGEX'
     Adds `--with-regex' to the `configure' command line.  If specified
     (the default), then the `regex' regular expression library is
     used, `regex.o' is put into `LIBOBJS', and `WITH_REGEX' is
     defined..  If `--without-regex' is given, then the `rx' regular
     expression library is used, and `rx.o' is put into `LIBOBJS'.



File: automake1.4.info,  Node: Extending aclocal,  Prev: Macros,  Up: configure

5.5 Writing your own aclocal macros
===================================

The `aclocal' program doesn't have any built-in knowledge of any
macros, so it is easy to extend it with your own macros.

   This is mostly used for libraries which want to supply their own
Autoconf macros for use by other programs.  For instance the `gettext'
library supplies a macro `AM_GNU_GETTEXT' which should be used by any
package using `gettext'.  When the library is installed, it installs
this macro so that `aclocal' will find it.

   A file of macros should be a series of `AC_DEFUN''s.  The `aclocal'
programs also understands `AC_REQUIRE', so it is safe to put each macro
in a separate file.  *Note Prerequisite Macros: (autoconf)Prerequisite
Macros, and *Note Macro Definitions: (autoconf)Macro Definitions.

   A macro file's name should end in `.m4'.  Such files should be
installed in `$(datadir)/aclocal'.


File: automake1.4.info,  Node: Top level,  Next: Programs,  Prev: configure,  Up: Top

6 The top-level `Makefile.am'
*****************************

In non-flat packages, the top level `Makefile.am' must tell Automake
which subdirectories are to be built.  This is done via the `SUBDIRS'
variable.  

   The `SUBDIRS' macro holds a list of subdirectories in which building
of various sorts can occur.  Many targets (e.g. `all') in the generated
`Makefile' will run both locally and in all specified subdirectories.
Note that the directories listed in `SUBDIRS' are not required to
contain `Makefile.am's; only `Makefile's (after configuration).  This
allows inclusion of libraries from packages which do not use Automake
(such as `gettext').  The directories mentioned in `SUBDIRS' must be
direct children of the current directory.  For instance, you cannot put
`src/subdir' into `SUBDIRS'.

   In a deep package, the top-level `Makefile.am' is often very short.
For instance, here is the `Makefile.am' from the GNU Hello distribution:

     EXTRA_DIST = BUGS ChangeLog.O README-alpha
     SUBDIRS = doc intl po src tests

   It is possible to override the `SUBDIRS' variable if, like in the
case of GNU `Inetutils', you want to only build a subset of the entire
package.  In your `Makefile.am' include:

     SUBDIRS = @SUBDIRS@

   Then in your `configure.in' you can specify:

     SUBDIRS = "src doc lib po"
     AC_SUBST(SUBDIRS)

   The upshot of this is that Automake is tricked into building the
package to take the subdirs, but doesn't actually bind that list until
`configure' is run.

   Although the `SUBDIRS' macro can contain configure substitutions
(e.g. `@DIRS@'); Automake itself does not actually examine the contents
of this variable.

   If `SUBDIRS' is defined, then your `configure.in' must include
`AC_PROG_MAKE_SET'.

   The use of `SUBDIRS' is not restricted to just the top-level
`Makefile.am'.  Automake can be used to construct packages of arbitrary
depth.

   By default, Automake generates `Makefiles' which work depth-first
(`postfix').  However, it is possible to change this ordering.  You can
do this by putting `.' into `SUBDIRS'.  For instance, putting `.'
first will cause a `prefix' ordering of directories.


File: automake1.4.info,  Node: Programs,  Next: Other objects,  Prev: Top level,  Up: Top

7 Building Programs and Libraries
*********************************

A large part of Automake's functionality is dedicated to making it easy
to build programs and libraries.

* Menu:

* A Program::                   Building a program
* A Library::                   Building a library
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* A Shared Library::            Building a Libtool library
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::
* Fortran 77 Support::
* Support for Other Languages::
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking


File: automake1.4.info,  Node: A Program,  Next: A Library,  Prev: Programs,  Up: Programs

7.1 Building a program
======================

In a directory containing source that gets built into a program (as
opposed to a library), the `PROGRAMS' primary is used.  Programs can be
installed in `bindir', `sbindir', `libexecdir', `pkglibdir', or not at
all (`noinst').

   For instance:

     bin_PROGRAMS = hello

   In this simple case, the resulting `Makefile.in' will contain code
to generate a program named `hello'.  The variable `hello_SOURCES' is
used to specify which source files get built into an executable:

     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h

   This causes each mentioned `.c' file to be compiled into the
corresponding `.o'.  Then all are linked to produce `hello'.

   If `PROG_SOURCES' is needed, but not specified, then it defaults to
the single file `prog.c'.  

   Multiple programs can be built in a single directory.  Multiple
programs can share a single source file, which must be listed in each
`_SOURCES' definition.

   Header files listed in a `_SOURCES' definition will be included in
the distribution but otherwise ignored.  In case it isn't obvious, you
should not include the header file generated by `configure' in an
`_SOURCES' variable; this file should not be distributed.  Lex (`.l')
and Yacc (`.y') files can also be listed; see *Note Yacc and Lex::.

   Automake must know all the source files that could possibly go into a
program, even if not all the files are built in every circumstance.
Any files which are only conditionally built should be listed in the
appropriate `EXTRA_' variable.  For instance, if `hello-linux.c' were
conditionally included in `hello', the `Makefile.am' would contain:

     EXTRA_hello_SOURCES = hello-linux.c

   Similarly, sometimes it is useful to determine the programs that are
to be built at configure time.  For instance, GNU `cpio' only builds
`mt' and `rmt' under special circumstances.

   In this case, you must notify Automake of all the programs that can
possibly be built, but at the same time cause the generated
`Makefile.in' to use the programs specified by `configure'.  This is
done by having `configure' substitute values into each `_PROGRAMS'
definition, while listing all optionally built programs in
`EXTRA_PROGRAMS'.  

   If you need to link against libraries that are not found by
`configure', you can use `LDADD' to do so.  This variable actually can
be used to add any options to the linker command line.  

   Sometimes, multiple programs are built in one directory but do not
share the same link-time requirements.  In this case, you can use the
`PROG_LDADD' variable (where PROG is the name of the program as it
appears in some `_PROGRAMS' variable, and usually written in lowercase)
to override the global `LDADD'.  If this variable exists for a given
program, then that program is not linked using `LDADD'.  

   For instance, in GNU cpio, `pax', `cpio' and `mt' are linked against
the library `libcpio.a'.  However, `rmt' is built in the same
directory, and has no such link requirement.  Also, `mt' and `rmt' are
only built on certain architectures.  Here is what cpio's
`src/Makefile.am' looks like (abridged):

     bin_PROGRAMS = cpio pax @MT@
     libexec_PROGRAMS = @RMT@
     EXTRA_PROGRAMS = mt rmt

     LDADD = ../lib/libcpio.a @INTLLIBS@
     rmt_LDADD =

     cpio_SOURCES = ...
     pax_SOURCES = ...
     mt_SOURCES = ...
     rmt_SOURCES = ...

   `PROG_LDADD' is inappropriate for passing program-specific linker
flags (except for `-l' and `-L').  So, use the `PROG_LDFLAGS' variable
for this purpose.  

   It is also occasionally useful to have a program depend on some other
target which is not actually part of that program.  This can be done
using the `PROG_DEPENDENCIES' variable.  Each program depends on the
contents of such a variable, but no further interpretation is done.

   If `PROG_DEPENDENCIES' is not supplied, it is computed by Automake.
The automatically-assigned value is the contents of `PROG_LDADD', with
most configure substitutions, `-l', and `-L' options removed.  The
configure substitutions that are left in are only `@LIBOBJS@' and
`@ALLOCA@'; these are left because it is known that they will not cause
an invalid value for `PROG_DEPENDENCIES' to be generated.


File: automake1.4.info,  Node: A Library,  Next: LIBOBJS,  Prev: A Program,  Up: Programs

7.2 Building a library
======================

Building a library is much like building a program.  In this case, the
name of the primary is `LIBRARIES'.  Libraries can be installed in
`libdir' or `pkglibdir'.

   *Note A Shared Library::, for information on how to build shared
libraries using Libtool and the `LTLIBRARIES' primary.

   Each `_LIBRARIES' variable is a list of the libraries to be built.
For instance to create a library named `libcpio.a', but not install it,
you would write:

     noinst_LIBRARIES = libcpio.a

   The sources that go into a library are determined exactly as they are
for programs, via the `_SOURCES' variables.  Note that the library name
is canonicalized (*note Canonicalization::), so the `_SOURCES' variable
corresponding to `liblob.a' is `liblob_a_SOURCES', not
`liblob.a_SOURCES'.

   Extra objects can be added to a library using the `LIBRARY_LIBADD'
variable.  This should be used for objects determined by `configure'.
Again from `cpio': 

     libcpio_a_LIBADD = @LIBOBJS@ @ALLOCA@


File: automake1.4.info,  Node: LIBOBJS,  Next: A Shared Library,  Prev: A Library,  Up: Programs

7.3 Special handling for LIBOBJS and ALLOCA
===========================================

Automake explicitly recognizes the use of `@LIBOBJS@' and `@ALLOCA@',
and uses this information, plus the list of `LIBOBJS' files derived
from `configure.in' to automatically include the appropriate source
files in the distribution (*note Dist::).  These source files are also
automatically handled in the dependency-tracking scheme; see *Note
Dependencies::.

   `@LIBOBJS@' and `@ALLOCA@' are specially recognized in any `_LDADD'
or `_LIBADD' variable.


File: automake1.4.info,  Node: A Shared Library,  Next: Program variables,  Prev: LIBOBJS,  Up: Programs

7.4 Building a Shared Library
=============================

Building shared libraries is a relatively complex matter.  For this
reason, GNU Libtool (*note Introduction: (libtool)Top.) was created to
help build shared libraries in a platform-independent way.

   Automake uses Libtool to build libraries declared with the
`LTLIBRARIES' primary.  Each `_LTLIBRARIES' variable is a list of
shared libraries to build.  For instance, to create a library named
`libgettext.a' and its corresponding shared libraries, and install them
in `libdir', write:

     lib_LTLIBRARIES = libgettext.la

   Note that shared libraries _must_ be installed, so
`check_LTLIBRARIES' is not allowed.  However, `noinst_LTLIBRARIES' is
allowed.  This feature should be used for libtool "convenience
libraries".

   For each library, the `LIBRARY_LIBADD' variable contains the names
of extra libtool objects (`.lo' files) to add to the shared library.
The `LIBRARY_LDFLAGS' variable contains any additional libtool flags,
such as `-version-info' or `-static'.

   Where an ordinary library might include `@LIBOBJS@', a libtool
library must use `@LTLIBOBJS@'.  This is required because the object
files that libtool operates on do not necessarily end in `.o'.  The
libtool manual contains more details on this topic.

   For libraries installed in some directory, Automake will
automatically supply the appropriate `-rpath' option.  However, for
libraries determined at configure time (and thus mentioned in
`EXTRA_LTLIBRARIES'), Automake does not know the eventual installation
directory; for such libraries you must add the `-rpath' option to the
appropriate `_LDFLAGS' variable by hand.

   *Note Using Automake with Libtool: (libtool)Using Automake, for more
information.


File: automake1.4.info,  Node: Program variables,  Next: Yacc and Lex,  Prev: A Shared Library,  Up: Programs

7.5 Variables used when building a program
==========================================

Occasionally it is useful to know which `Makefile' variables Automake
uses for compilations; for instance you might need to do your own
compilation in some special cases.

   Some variables are inherited from Autoconf; these are `CC',
`CFLAGS', `CPPFLAGS', `DEFS', `LDFLAGS', and `LIBS'.  

   There are some additional variables which Automake itself defines:

`INCLUDES'
     A list of `-I' options.  This can be set in your `Makefile.am' if
     you have special directories you want to look in.  Automake already
     provides some `-I' options automatically.  In particular it
     generates `-I$(srcdir)' and a `-I' pointing to the directory
     holding `config.h' (if you've used `AC_CONFIG_HEADER' or
     `AM_CONFIG_HEADER').

     `INCLUDES' can actually be used for other `cpp' options besides
     `-I'.  For instance, it is sometimes used to pass arbitrary `-D'
     options to the compiler.

`COMPILE'
     This is the command used to actually compile a C source file.  The
     filename is appended to form the complete command line.

`LINK'
     This is the command used to actually link a C program.


File: automake1.4.info,  Node: Yacc and Lex,  Next: C++ Support,  Prev: Program variables,  Up: Programs

7.6 Yacc and Lex support
========================

Automake has somewhat idiosyncratic support for Yacc and Lex.

   Automake assumes that the `.c' file generated by `yacc' (or `lex')
should be named using the basename of the input file.  That is, for a
yacc source file `foo.y', Automake will cause the intermediate file to
be named `foo.c' (as opposed to `y.tab.c', which is more traditional).

   The extension of a yacc source file is used to determine the
extension of the resulting `C' or `C++' file.  Files with the extension
`.y' will be turned into `.c' files; likewise, `.yy' will become `.cc';
`.y++', `c++'; and `.yxx', `.cxx'.

   Likewise, lex source files can be used to generate `C' or `C++'; the
extensions `.l', `.ll', `.l++', and `.lxx' are recognized.

   You should never explicitly mention the intermediate (`C' or `C++')
file in any `SOURCES' variable; only list the source file.

   The intermediate files generated by `yacc' (or `lex') will be
included in any distribution that is made.  That way the user doesn't
need to have `yacc' or `lex'.

   If a `yacc' source file is seen, then your `configure.in' must
define the variable `YACC'.  This is most easily done by invoking the
macro `AC_PROG_YACC' (*note Particular Program Checks:
(autoconf)Particular Programs.).

   Similarly, if a `lex' source file is seen, then your `configure.in'
must define the variable `LEX'.  You can use `AC_PROG_LEX' to do this
(*note Particular Program Checks: (autoconf)Particular Programs.).
Automake's `lex' support also requires that you use the `AC_DECL_YYTEXT'
macro--automake needs to know the value of `LEX_OUTPUT_ROOT'.  This is
all handled for you if you use the `AM_PROG_LEX' macro (*note Macros::).

   Automake makes it possible to include multiple `yacc' (or `lex')
source files in a single program.  Automake uses a small program called
`ylwrap' to run `yacc' (or `lex') in a subdirectory.  This is necessary
because yacc's output filename is fixed, and a parallel make could
conceivably invoke more than one instance of `yacc' simultaneously.
The `ylwrap' program is distributed with Automake.  It should appear in
the directory specified by `AC_CONFIG_AUX_DIR' (*note Finding
`configure' Input: (autoconf)Input.), or the current directory if that
macro is not used in `configure.in'.

   For `yacc', simply managing locking is insufficient.  The output of
`yacc' always uses the same symbol names internally, so it isn't
possible to link two `yacc' parsers into the same executable.

   We recommend using the following renaming hack used in `gdb':
     #define	yymaxdepth c_maxdepth
     #define	yyparse	c_parse
     #define	yylex	c_lex
     #define	yyerror	c_error
     #define	yylval	c_lval
     #define	yychar	c_char
     #define	yydebug	c_debug
     #define	yypact	c_pact
     #define	yyr1	c_r1
     #define	yyr2	c_r2
     #define	yydef	c_def
     #define	yychk	c_chk
     #define	yypgo	c_pgo
     #define	yyact	c_act
     #define	yyexca	c_exca
     #define yyerrflag c_errflag
     #define yynerrs	c_nerrs
     #define	yyps	c_ps
     #define	yypv	c_pv
     #define	yys	c_s
     #define	yy_yys	c_yys
     #define	yystate	c_state
     #define	yytmp	c_tmp
     #define	yyv	c_v
     #define	yy_yyv	c_yyv
     #define	yyval	c_val
     #define	yylloc	c_lloc
     #define yyreds	c_reds
     #define yytoks	c_toks
     #define yylhs	c_yylhs
     #define yylen	c_yylen
     #define yydefred c_yydefred
     #define yydgoto	c_yydgoto
     #define yysindex c_yysindex
     #define yyrindex c_yyrindex
     #define yygindex c_yygindex
     #define yytable	 c_yytable
     #define yycheck	 c_yycheck
     #define yyname   c_yyname
     #define yyrule   c_yyrule

   For each define, replace the `c_' prefix with whatever you like.
These defines work for `bison', `byacc', and traditional `yacc's.  If
you find a parser generator that uses a symbol not covered here, please
report the new name so it can be added to the list.


File: automake1.4.info,  Node: C++ Support,  Next: Fortran 77 Support,  Prev: Yacc and Lex,  Up: Programs

7.7 C++ Support
===============

Automake includes full support for C++.

   Any package including C++ code must define the output variable `CXX'
in `configure.in'; the simplest way to do this is to use the
`AC_PROG_CXX' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).

   A few additional variables are defined when a C++ source file is
seen:

`CXX'
     The name of the C++ compiler.

`CXXFLAGS'
     Any flags to pass to the C++ compiler.

`CXXCOMPILE'
     The command used to actually compile a C++ source file.  The file
     name is appended to form the complete command line.

`CXXLINK'
     The command used to actually link a C++ program.


File: automake1.4.info,  Node: Fortran 77 Support,  Next: Support for Other Languages,  Prev: C++ Support,  Up: Programs

7.8 Fortran 77 Support
======================

Automake includes full support for Fortran 77.

   Any package including Fortran 77 code must define the output variable
`F77' in `configure.in'; the simplest way to do this is to use the
`AC_PROG_F77' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).  *Note Fortran 77 and Autoconf::.

   A few additional variables are defined when a Fortran 77 source file
is seen:

`F77'
     The name of the Fortran 77 compiler.

`FFLAGS'
     Any flags to pass to the Fortran 77 compiler.

`RFLAGS'
     Any flags to pass to the Ratfor compiler.

`F77COMPILE'
     The command used to actually compile a Fortran 77 source file.
     The file name is appended to form the complete command line.

`FLINK'
     The command used to actually link a pure Fortran 77 program or
     shared library.


   Automake can handle preprocessing Fortran 77 and Ratfor source files
in addition to compiling them(1).  Automake also contains some support
for creating programs and shared libraries that are a mixture of
Fortran 77 and other languages (*note Mixing Fortran 77 With C and
C++::).

   These issues are covered in the following sections.

* Menu:

* Preprocessing Fortran 77::
* Compiling Fortran 77 Files::
* Mixing Fortran 77 With C and C++::
* Fortran 77 and Autoconf::

   ---------- Footnotes ----------

   (1) Much, if not most, of the information in the following sections
pertaining to preprocessing Fortran 77 programs was taken almost
verbatim from *Note Catalogue of Rules: (make)Catalogue of Rules.


File: automake1.4.info,  Node: Preprocessing Fortran 77,  Next: Compiling Fortran 77 Files,  Prev: Fortran 77 Support,  Up: Fortran 77 Support

7.8.1 Preprocessing Fortran 77
------------------------------

`N.f' is made automatically from `N.F' or `N.r'.  This rule runs just
the preprocessor to convert a preprocessable Fortran 77 or Ratfor
source file into a strict Fortran 77 source file.  The precise command
used is as follows:

`.F'
     `$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake1.4.info,  Node: Compiling Fortran 77 Files,  Next: Mixing Fortran 77 With C and C++,  Prev: Preprocessing Fortran 77,  Up: Fortran 77 Support

7.8.2 Compiling Fortran 77 Files
--------------------------------

`N.o' is made automatically from `N.f', `N.F' or `N.r' by running the
Fortran 77 compiler.  The precise command used is as follows:

`.f'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS)'

`.F'
     `$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake1.4.info,  Node: Mixing Fortran 77 With C and C++,  Next: Fortran 77 and Autoconf,  Prev: Compiling Fortran 77 Files,  Up: Fortran 77 Support

7.8.3 Mixing Fortran 77 With C and C++
--------------------------------------

Automake currently provides _limited_ support for creating programs and
shared libraries that are a mixture of Fortran 77 and C and/or C++.
However, there are many other issues related to mixing Fortran 77 with
other languages that are _not_ (currently) handled by Automake, but
that are handled by other packages(1).

   Automake can help in two ways:

  1. Automatic selection of the linker depending on which combinations
     of source code.

  2. Automatic selection of the appropriate linker flags (e.g. `-L' and
     `-l') to pass to the automatically selected linker in order to link
     in the appropriate Fortran 77 intrinsic and run-time libraries.

     These extra Fortran 77 linker flags are supplied in the output
     variable `FLIBS' by the `AC_F77_LIBRARY_LDFLAGS' Autoconf macro
     supplied with newer versions of Autoconf (Autoconf version 2.13 and
     later).  *Note Fortran 77 Compiler Characteristics:
     (autoconf)Fortran 77 Compiler Characteristics.

   If Automake detects that a program or shared library (as mentioned in
some `_PROGRAMS' or `_LTLIBRARIES' primary) contains source code that
is a mixture of Fortran 77 and C and/or C++, then it requires that the
macro `AC_F77_LIBRARY_LDFLAGS' be called in `configure.in', and that
either `$(FLIBS)' or `@FLIBS@' appear in the appropriate `_LDADD' (for
programs) or `_LIBADD' (for shared libraries) variables.  It is the
responsibility of the person writing the `Makefile.am' to make sure
that `$(FLIBS)' or `@FLIBS@' appears in the appropriate `_LDADD' or
`_LIBADD' variable.

   For example, consider the following `Makefile.am':

     bin_PROGRAMS = foo
     foo_SOURCES  = main.cc foo.f
     foo_LDADD    = libfoo.la @FLIBS@

     pkglib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
     libfoo_la_LIBADD   = $(FLIBS)

   In this case, Automake will insist that `AC_F77_LIBRARY_LDFLAGS' is
mentioned in `configure.in'.  Also, if `@FLIBS@' hadn't been mentioned
in `foo_LDADD' and `libfoo_la_LIBADD', then Automake would have issued
a warning.

* Menu:

* How the Linker is Chosen::

   ---------- Footnotes ----------

   (1) For example, the cfortran package
(http://www-zeus.desy.de/~burow/cfortran/) addresses all of these
inter-language issues, and runs under nearly all Fortran 77, C and C++
compilers on nearly all platforms.  However, `cfortran' is not yet Free
Software, but it will be in the next major release.


File: automake1.4.info,  Node: How the Linker is Chosen,  Prev: Mixing Fortran 77 With C and C++,  Up: Mixing Fortran 77 With C and C++

7.8.3.1 How the Linker is Chosen
................................

The following diagram demonstrates under what conditions a particular
linker is chosen by Automake.

   For example, if Fortran 77, C and C++ source code were to be compiled
into a program, then the C++ linker will be used.  In this case, if the
C or Fortran 77 linkers required any special libraries that weren't
included by the C++ linker, then they must be manually added to an
`_LDADD' or `_LIBADD' variable by the user writing the `Makefile.am'.

                          \              Linker
               source      \
                code        \     C        C++     Fortran
          -----------------  +---------+---------+---------+
                             |         |         |         |
          C                  |    x    |         |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
                    Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C +       Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+


File: automake1.4.info,  Node: Fortran 77 and Autoconf,  Prev: Mixing Fortran 77 With C and C++,  Up: Fortran 77 Support

7.8.4 Fortran 77 and Autoconf
-----------------------------

The current Automake support for Fortran 77 requires a recent enough
version Autoconf that also includes support for Fortran 77.  Full
Fortran 77 support was added to Autoconf 2.13, so you will want to use
that version of Autoconf or later.


File: automake1.4.info,  Node: Support for Other Languages,  Next: ANSI,  Prev: Fortran 77 Support,  Up: Programs

7.9 Support for Other Languages
===============================

Automake currently only includes full support for C, C++ (*note C++
Support::)and Fortran 77 (*note Fortran 77 Support::).  There is only
rudimentary support for other languages, support for which will be
improved based on user demand.


File: automake1.4.info,  Node: ANSI,  Next: Dependencies,  Prev: Support for Other Languages,  Up: Programs

7.10 Automatic de-ANSI-fication
===============================

Although the GNU standards allow the use of ANSI C, this can have the
effect of limiting portability of a package to some older compilers
(notably SunOS).

   Automake allows you to work around this problem on such machines by
"de-ANSI-fying" each source file before the actual compilation takes
place.

   If the `Makefile.am' variable `AUTOMAKE_OPTIONS' (*note Options::)
contains the option `ansi2knr' then code to handle de-ANSI-fication is
inserted into the generated `Makefile.in'.

   This causes each C source file in the directory to be treated as
ANSI C.  If an ANSI C compiler is available, it is used.  If no ANSI C
compiler is available, the `ansi2knr' program is used to convert the
source files into K&R C, which is then compiled.

   The `ansi2knr' program is simple-minded.  It assumes the source code
will be formatted in a particular way; see the `ansi2knr' man page for
details.

   Support for de-ANSI-fication requires the source files `ansi2knr.c'
and `ansi2knr.1' to be in the same package as the ANSI C source; these
files are distributed with Automake.  Also, the package `configure.in'
must call the macro `AM_C_PROTOTYPES' (*note Macros::).  

   Automake also handles finding the `ansi2knr' support files in some
other directory in the current package.  This is done by prepending the
relative path to the appropriate directory to the `ansi2knr' option.
For instance, suppose the package has ANSI C code in the `src' and
`lib' subdirs.  The files `ansi2knr.c' and `ansi2knr.1' appear in
`lib'.  Then this could appear in `src/Makefile.am':

     AUTOMAKE_OPTIONS = ../lib/ansi2knr

   If no directory prefix is given, the files are assumed to be in the
current directory.

   Files mentioned in `LIBOBJS' which need de-ANSI-fication will not be
automatically handled.  That's because `configure' will generate an
object name like `regex.o', while `make' will be looking for `regex_.o'
(when de-ANSI-fying).  Eventually this problem will be fixed via
`autoconf' magic, but for now you must put this code into your
`configure.in', just before the `AC_OUTPUT' call:

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`


File: automake1.4.info,  Node: Dependencies,  Prev: ANSI,  Up: Programs

7.11 Automatic dependency tracking
==================================

As a developer it is often painful to continually update the
`Makefile.in' whenever the include-file dependencies change in a
project.  Automake supplies a way to automatically track dependency
changes, and distribute the dependencies in the generated `Makefile.in'.

   Currently this support requires the use of GNU `make' and `gcc'.  It
might become possible in the future to supply a different dependency
generating program, if there is enough demand.  In the meantime, this
mode is enabled by default if any C program or library is defined in
the current directory, so you may get a `Must be a separator' error
from non-GNU make.

   When you decide to make a distribution, the `dist' target will
re-run `automake' with `--include-deps' and other options.  *Note
Invoking Automake::, and *Note Options::.  This will cause the
previously generated dependencies to be inserted into the generated
`Makefile.in', and thus into the distribution.  This step also turns
off inclusion of the dependency generation code, so that those who
download your distribution but don't use GNU `make' and `gcc' will not
get errors.

   When added to the `Makefile.in', the dependencies have all
system-specific dependencies automatically removed.  This can be done by
listing the files in `OMIT_DEPENDENCIES'.  For instance all references
to system header files are removed by Automake.  Sometimes it is useful
to specify that a certain header file should be removed.  For instance
if your `configure.in' uses `AM_WITH_REGEX', then any dependency on
`rx.h' or `regex.h' should be removed, because the correct one cannot
be known until the user configures the package.

   As it turns out, Automake is actually smart enough to handle the
particular case of the regular expression header.  It will also
automatically omit `libintl.h' if `AM_GNU_GETTEXT' is used.

   Automatic dependency tracking can be suppressed by putting
`no-dependencies' in the variable `AUTOMAKE_OPTIONS'.

   If you unpack a distribution made by `make dist', and you want to
turn on the dependency-tracking code again, simply re-run `automake'.

   The actual dependency files are put under the build directory, in a
subdirectory named `.deps'.  These dependencies are machine specific.
It is safe to delete them if you like; they will be automatically
recreated during the next build.


File: automake1.4.info,  Node: Other objects,  Next: Other GNU Tools,  Prev: Programs,  Up: Top

8 Other Derived Objects
***********************

Automake can handle derived objects which are not C programs.  Sometimes
the support for actually building such objects must be explicitly
supplied, but Automake will still automatically handle installation and
distribution.

* Menu:

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources


File: automake1.4.info,  Node: Scripts,  Next: Headers,  Prev: Other objects,  Up: Other objects

8.1 Executable Scripts
======================

It is possible to define and install programs which are scripts.  Such
programs are listed using the `SCRIPTS' primary name.  Automake doesn't
define any dependencies for scripts; the `Makefile.am' should include
the appropriate rules.  

   Automake does not assume that scripts are derived objects; such
objects must be deleted by hand (*note Clean::).

   The `automake' program itself is a Perl script that is generated at
configure time from `automake.in'.  Here is how this is handled:

     bin_SCRIPTS = automake

   Since `automake' appears in the `AC_OUTPUT' macro, a target for it
is automatically generated.

   Script objects can be installed in `bindir', `sbindir',
`libexecdir', or `pkgdatadir'.


File: automake1.4.info,  Node: Headers,  Next: Data,  Prev: Scripts,  Up: Other objects

8.2 Header files
================

Header files are specified by the `HEADERS' family of variables.
Generally header files are not installed, so the `noinst_HEADERS'
variable will be the most used.  

   All header files must be listed somewhere; missing ones will not
appear in the distribution.  Often it is clearest to list uninstalled
headers with the rest of the sources for a program.  *Note A Program::.
Headers listed in a `_SOURCES' variable need not be listed in any
`_HEADERS' variable.

   Headers can be installed in `includedir', `oldincludedir', or
`pkgincludedir'.


File: automake1.4.info,  Node: Data,  Next: Sources,  Prev: Headers,  Up: Other objects

8.3 Architecture-independent data files
=======================================

Automake supports the installation of miscellaneous data files using the
`DATA' family of variables.  

   Such data can be installed in the directories `datadir',
`sysconfdir', `sharedstatedir', `localstatedir', or `pkgdatadir'.

   By default, data files are _not_ included in a distribution.

   Here is how Automake installs its auxiliary data files:

     pkgdata_DATA = clean-kr.am clean.am ...


File: automake1.4.info,  Node: Sources,  Prev: Data,  Up: Other objects

8.4 Built sources
=================

Occasionally a file which would otherwise be called `source' (e.g. a C
`.h' file) is actually derived from some other file.  Such files should
be listed in the `BUILT_SOURCES' variable.  

   Built sources are also not compiled by default.  You must explicitly
mention them in some other `_SOURCES' variable for this to happen.

   Note that, in some cases, `BUILT_SOURCES' will work in somewhat
surprising ways.  In order to get the built sources to work with
automatic dependency tracking, the `Makefile' must depend on
`$(BUILT_SOURCES)'.  This can cause these sources to be rebuilt at what
might seem like funny times.


File: automake1.4.info,  Node: Other GNU Tools,  Next: Documentation,  Prev: Other objects,  Up: Top

9 Other GNU Tools
*****************

Since Automake is primarily intended to generate `Makefile.in's for use
in GNU programs, it tries hard to interoperate with other GNU tools.

* Menu:

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Guile::                       Guile
* Libtool::                     Libtool
* Java::                        Java


File: automake1.4.info,  Node: Emacs Lisp,  Next: gettext,  Prev: Other GNU Tools,  Up: Other GNU Tools

9.1 Emacs Lisp
==============

Automake provides some support for Emacs Lisp.  The `LISP' primary is
used to hold a list of `.el' files.  Possible prefixes for this primary
are `lisp_' and `noinst_'.  Note that if `lisp_LISP' is defined, then
`configure.in' must run `AM_PATH_LISPDIR' (*note Macros::).

   By default Automake will byte-compile all Emacs Lisp source files
using the Emacs found by `AM_PATH_LISPDIR'.  If you wish to avoid
byte-compiling, simply define the variable `ELCFILES' to be empty.
Byte-compiled Emacs Lisp files are not portable among all versions of
Emacs, so it makes sense to turn this off if you expect sites to have
more than one version of Emacs installed.  Furthermore, many packages
don't actually benefit from byte-compilation.  Still, we recommend that
you leave it enabled by default.  It is probably better for sites with
strange setups to cope for themselves than to make the installation less
nice for everybody else.


File: automake1.4.info,  Node: gettext,  Next: Guile,  Prev: Emacs Lisp,  Up: Other GNU Tools

9.2 Gettext
===========

If `AM_GNU_GETTEXT' is seen in `configure.in', then Automake turns on
support for GNU gettext, a message catalog system for
internationalization (*note GNU Gettext: (gettext)GNU Gettext.).

   The `gettext' support in Automake requires the addition of two
subdirectories to the package, `intl' and `po'.  Automake insures that
these directories exist and are mentioned in `SUBDIRS'.

   Furthermore, Automake checks that the definition of `ALL_LINGUAS' in
`configure.in' corresponds to all the valid `.po' files, and nothing
more.


File: automake1.4.info,  Node: Guile,  Next: Libtool,  Prev: gettext,  Up: Other GNU Tools

9.3 Guile
=========

Automake provides some automatic support for writing Guile modules.
Automake will turn on Guile support if the `AM_INIT_GUILE_MODULE' macro
is used in `configure.in'.

   Right now Guile support just means that the `AM_INIT_GUILE_MODULE'
macro is understood to mean:
   * `AM_INIT_AUTOMAKE' is run.

   * `AC_CONFIG_AUX_DIR' is run, with a path of `..'.

   As the Guile module code matures, no doubt the Automake support will
grow as well.


File: automake1.4.info,  Node: Libtool,  Next: Java,  Prev: Guile,  Up: Other GNU Tools

9.4 Libtool
===========

Automake provides support for GNU Libtool (*note Introduction:
(libtool)Top.) with the `LTLIBRARIES' primary.  *Note A Shared
Library::.


File: automake1.4.info,  Node: Java,  Prev: Libtool,  Up: Other GNU Tools

9.5 Java
========

Automake provides some minimal support for Java compilation with the
`JAVA' primary.

   Any `.java' files listed in a `_JAVA' variable will be compiled with
`JAVAC' at build time.  By default, `.class' files are not included in
the distribution.

   Currently Automake enforces the restriction that only one `_JAVA'
primary can be used in a given `Makefile.am'.  The reason for this
restriction is that, in general, it isn't possible to know which
`.class' files were generated from which `.java' files - so it would be
impossible to know which files to install where.


File: automake1.4.info,  Node: Documentation,  Next: Install,  Prev: Other GNU Tools,  Up: Top

10 Building documentation
*************************

Currently Automake provides support for Texinfo and man pages.

* Menu:

* Texinfo::                     Texinfo
* Man pages::                   Man pages


File: automake1.4.info,  Node: Texinfo,  Next: Man pages,  Prev: Documentation,  Up: Documentation

10.1 Texinfo
============

If the current directory contains Texinfo source, you must declare it
with the `TEXINFOS' primary.  Generally Texinfo files are converted
into info, and thus the `info_TEXINFOS' macro is most commonly used
here.  Note that any Texinfo source file must end in the `.texi' or
`.texinfo' extension.  

   If the `.texi' file `@include's `version.texi', then that file will
be automatically generated.  The file `version.texi' defines three
Texinfo macros you can reference: `EDITION', `VERSION', and `UPDATED'.
The first two hold the version number of your package (but are kept
separate for clarity); the last is the date the primary file was last
modified.  The `version.texi' support requires the `mdate-sh' program;
this program is supplied with Automake and automatically included when
`automake' is invoked with the `--add-missing' option.

   Sometimes an info file actually depends on more than one `.texi'
file.  For instance, in GNU Hello, `hello.texi' includes the file
`gpl.texi'.  You can tell Automake about these dependencies using the
`TEXI_TEXINFOS' variable.  Here is how GNU Hello does it: 

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   By default, Automake requires the file `texinfo.tex' to appear in
the same directory as the Texinfo source.  However, if you used
`AC_CONFIG_AUX_DIR' in `configure.in' (*note Finding `configure' Input:
(autoconf)Input.), then `texinfo.tex' is looked for there.  Automake
supplies `texinfo.tex' if `--add-missing' is given.

   If your package has Texinfo files in many directories, you can use
the variable `TEXINFO_TEX' to tell Automake where to find the canonical
`texinfo.tex' for your package.  The value of this variable should be
the relative path from the current `Makefile.am' to `texinfo.tex':

     TEXINFO_TEX = ../doc/texinfo.tex

   The option `no-texinfo.tex' can be used to eliminate the requirement
for `texinfo.tex'.  Use of the variable `TEXINFO_TEX' is preferable,
however, because that allows the `dvi' target to still work.

   Automake generates an `install-info' target; some people apparently
use this.  By default, info pages are installed by `make install'.
This can be prevented via the `no-installinfo' option.


File: automake1.4.info,  Node: Man pages,  Prev: Texinfo,  Up: Documentation

10.2 Man pages
==============

A package can also include man pages (but see the GNU standards on this
matter, *Note Man Pages: (standards)Man Pages.)  Man pages are declared
using the `MANS' primary.  Generally the `man_MANS' macro is used.  Man
pages are automatically installed in the correct subdirectory of
`mandir', based on the file extension.  They are not automatically
included in the distribution.  

   By default, man pages are installed by `make install'.  However,
since the GNU project does not require man pages, many maintainers do
not expend effort to keep the man pages up to date.  In these cases, the
`no-installman' option will prevent the man pages from being installed
by default.  The user can still explicitly install them via `make
install-man'.  

   Here is how the documentation is handled in GNU `cpio' (which
includes both Texinfo documentation and man pages):

     info_TEXINFOS = cpio.texi
     man_MANS = cpio.1 mt.1
     EXTRA_DIST = $(man_MANS)

   Texinfo source and info pages are all considered to be source for the
purposes of making a distribution.

   Man pages are not currently considered to be source, because it is
not uncommon for man pages to be automatically generated.  For the same
reason, they are not automatically included in the distribution.


File: automake1.4.info,  Node: Install,  Next: Clean,  Prev: Documentation,  Up: Top

11 What Gets Installed
**********************

Naturally, Automake handles the details of actually installing your
program once it has been built.  All `PROGRAMS', `SCRIPTS',
`LIBRARIES', `LISP', `DATA' and `HEADERS' are automatically installed
in the appropriate places.

   Automake also handles installing any specified info and man pages.

   Automake generates separate `install-data' and `install-exec'
targets, in case the installer is installing on multiple machines which
share directory structure--these targets allow the machine-independent
parts to be installed only once.  The `install' target depends on both
of these targets.  

   Automake also generates an `uninstall' target, an `installdirs'
target, and an `install-strip' target.  

   It is possible to extend this mechanism by defining an
`install-exec-local' or `install-data-local' target.  If these targets
exist, they will be run at `make install' time.  

   Variables using the standard directory prefixes `data', `info',
`man', `include', `oldinclude', `pkgdata', or `pkginclude' (e.g.
`data_DATA') are installed by `install-data'.

   Variables using the standard directory prefixes `bin', `sbin',
`libexec', `sysconf', `localstate', `lib', or `pkglib' (e.g.
`bin_PROGRAMS') are installed by `install-exec'.

   Any variable using a user-defined directory prefix with `exec' in
the name (e.g. `myexecbin_PROGRAMS' is installed by `install-exec'.
All other user-defined prefixes are installed by `install-data'.

   Automake generates support for the `DESTDIR' variable in all install
rules.  `DESTDIR' is used during the `make install' step to relocate
install objects into a staging area.  Each object and path is prefixed
with the value of `DESTDIR' before being copied into the install area.
Here is an example of typical DESTDIR usage:

     make DESTDIR=/tmp/staging install

   This places install objects in a directory tree built under
`/tmp/staging'.  If `/gnu/bin/foo' and `/gnu/share/aclocal/foo.m4' are
to be installed, the above command would install
`/tmp/staging/gnu/bin/foo' and `/tmp/staging/gnu/share/aclocal/foo.m4'.

   This feature is commonly used to build install images and packages.
For more information, see *Note Makefile Conventions:
(standards)Makefile Conventions.


File: automake1.4.info,  Node: Clean,  Next: Dist,  Prev: Install,  Up: Top

12 What Gets Cleaned
********************

The GNU Makefile Standards specify a number of different clean rules.
Generally the files that can be cleaned are determined automatically by
Automake.  Of course, Automake also recognizes some variables that can
be defined to specify additional files to clean.  These variables are
`MOSTLYCLEANFILES', `CLEANFILES', `DISTCLEANFILES', and
`MAINTAINERCLEANFILES'.  


File: automake1.4.info,  Node: Dist,  Next: Tests,  Prev: Clean,  Up: Top

13 What Goes in a Distribution
******************************

The `dist' target in the generated `Makefile.in' can be used to
generate a gzip'd `tar' file for distribution.  The tar file is named
based on the `PACKAGE' and `VERSION' variables; more precisely it is
named `PACKAGE-VERSION.tar.gz'.  You can use the `make' variable
`GZIP_ENV' to control how gzip is run.  The default setting is `--best'.

   For the most part, the files to distribute are automatically found by
Automake: all source files are automatically included in a distribution,
as are all `Makefile.am's and `Makefile.in's.  Automake also has a
built-in list of commonly used files which, if present in the current
directory, are automatically included.  This list is printed by
`automake --help'.  Also, files which are read by `configure' (i.e. the
source files corresponding to the files specified in the `AC_OUTPUT'
invocation) are automatically distributed.

   Still, sometimes there are files which must be distributed, but which
are not covered in the automatic rules.  These files should be listed in
the `EXTRA_DIST' variable.  You can mention files from subdirectories
in `EXTRA_DIST'.  You can also mention a directory there; in this case
the entire directory will be recursively copied into the distribution.  

   If you define `SUBDIRS', Automake will recursively include the
subdirectories in the distribution.  If `SUBDIRS' is defined
conditionally (*note Conditionals::), Automake will normally include all
directories that could possibly appear in `SUBDIRS' in the
distribution.  If you need to specify the set of directories
conditionally, you can set the variable `DIST_SUBDIRS' to the exact
list of subdirectories to include in the distribution.  

   Occasionally it is useful to be able to change the distribution
before it is packaged up.  If the `dist-hook' target exists, it is run
after the distribution directory is filled, but before the actual tar
(or shar) file is created.  One way to use this is for distributing
files in subdirectories for which a new `Makefile.am' is overkill:

     dist-hook:
             mkdir $(distdir)/random
             cp -p $(srcdir)/random/a1 $(srcdir)/random/a2 $(distdir)/random

   Automake also generates a `distcheck' target which can be help to
ensure that a given distribution will actually work.  `distcheck' makes
a distribution, and then tries to do a `VPATH' build.  


File: automake1.4.info,  Node: Tests,  Next: Options,  Prev: Dist,  Up: Top

14 Support for test suites
**************************

Automake supports two forms of test suites.

   If the variable `TESTS' is defined, its value is taken to be a list
of programs to run in order to do the testing.  The programs can either
be derived objects or source objects; the generated rule will look both
in `srcdir' and `.'.  Programs needing data files should look for them
in `srcdir' (which is both an environment variable and a make variable)
so they work when building in a separate directory (*note Build
Directories: (autoconf)Build Directories.), and in particular for the
`distcheck' target (*note Dist::).

   The number of failures will be printed at the end of the run.  If a
given test program exits with a status of 77, then its result is ignored
in the final count.  This feature allows non-portable tests to be
ignored in environments where they don't make sense.

   The variable `TESTS_ENVIRONMENT' can be used to set environment
variables for the test run; the environment variable `srcdir' is set in
the rule.  If all your test programs are scripts, you can also set
`TESTS_ENVIRONMENT' to an invocation of the shell (e.g.  `$(SHELL)
-x'); this can be useful for debugging the tests.  

   If `dejagnu' (ftp://prep.ai.mit.edu/pub/gnu/dejagnu-1.3.tar.gz)
appears in `AUTOMAKE_OPTIONS', then a `dejagnu'-based test suite is
assumed.  The value of the variable `DEJATOOL' is passed as the
`--tool' argument to `runtest'; it defaults to the name of the package.

   The variable `RUNTESTDEFAULTFLAGS' holds the `--tool' and `--srcdir'
flags that are passed to dejagnu by default; this can be overridden if
necessary.  

   The variables `EXPECT', `RUNTEST' and `RUNTESTFLAGS' can also be
overridden to provide project-specific values.  For instance, you will
need to do this if you are testing a compiler toolchain, because the
default values do not take into account host and target names.  

   In either case, the testing is done via `make check'.


File: automake1.4.info,  Node: Options,  Next: Miscellaneous,  Prev: Tests,  Up: Top

15 Changing Automake's Behavior
*******************************

Various features of Automake can be controlled by options in the
`Makefile.am'.  Such options are listed in a special variable named
`AUTOMAKE_OPTIONS'.  Currently understood options are: 

`gnits'
`gnu'
`foreign'

`cygnus'
     Set the strictness as appropriate.  The `gnits' option also implies
     `readme-alpha' and `check-news'.

`ansi2knr'
`path/ansi2knr'
     Turn on automatic de-ANSI-fication.  *Note ANSI::.  If preceded by
     a path, the generated `Makefile.in' will look in the specified
     directory to find the `ansi2knr' program.  Generally the path
     should be a relative path to another directory in the same
     distribution (though Automake currently does not check this).

`check-news'
     Cause `make dist' to fail unless the current version number appears
     in the first few lines of the `NEWS' file.

`dejagnu'
     Cause `dejagnu'-specific rules to be generated.  *Note Tests::.

`dist-shar'
     Generate a `dist-shar' target as well as the ordinary `dist'
     target.  This new target will create a shar archive of the
     distribution.  

`dist-zip'
     Generate a `dist-zip' target as well as the ordinary `dist'
     target.  This new target will create a zip archive of the
     distribution.  

`dist-tarZ'
     Generate a `dist-tarZ' target as well as the ordinary `dist'
     target.  This new target will create a compressed tar archive of
     the distribution; a traditional `tar' and `compress' will be
     assumed.  Warning: if you are actually using `GNU tar', then the
     generated archive might contain nonportable constructs.  

`no-dependencies'
     This is similar to using `--include-deps' on the command line, but
     is useful for those situations where you don't have the necessary
     bits to make automatic dependency tracking work *Note
     Dependencies::.  In this case the effect is to effectively disable
     automatic dependency tracking.

`no-installinfo'
     The generated `Makefile.in' will not cause info pages to be built
     or installed by default.  However, `info' and `install-info'
     targets will still be available.  This option is disallowed at
     `GNU' strictness and above.  

`no-installman'
     The generated `Makefile.in' will not cause man pages to be
     installed by default.  However, an `install-man' target will still
     be available for optional installation.  This option is disallowed
     at `GNU' strictness and above.  

`no-texinfo.tex'
     Don't require `texinfo.tex', even if there are texinfo files in
     this directory.

`readme-alpha'
     If this release is an alpha release, and the file `README-alpha'
     exists, then it will be added to the distribution.  If this option
     is given, version numbers are expected to follow one of two forms.
     The first form is `MAJOR.MINOR.ALPHA', where each element is a
     number; the final period and number should be left off for
     non-alpha releases.  The second form is `MAJOR.MINORALPHA', where
     ALPHA is a letter; it should be omitted for non-alpha releases.

VERSION
     A version number (e.g. `0.30') can be specified.  If Automake is
     not newer than the version specified, creation of the `Makefile.in'
     will be suppressed.

   Unrecognized options are diagnosed by `automake'.


File: automake1.4.info,  Node: Miscellaneous,  Next: Include,  Prev: Options,  Up: Top

16 Miscellaneous Rules
**********************

There are a few rules and variables that didn't fit anywhere else.

* Menu:

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions


File: automake1.4.info,  Node: Tags,  Next: Suffixes,  Prev: Miscellaneous,  Up: Miscellaneous

16.1 Interfacing to `etags'
===========================

Automake will generate rules to generate `TAGS' files for use with GNU
Emacs under some circumstances.

   If any C, C++ or Fortran 77 source code or headers are present, then
`tags' and `TAGS' targets will be generated for the directory.  

   At the topmost directory of a multi-directory package, a `tags'
target file will be generated which, when run, will generate a `TAGS'
file that includes by reference all `TAGS' files from subdirectories.

   Also, if the variable `ETAGS_ARGS' is defined, a `tags' target will
be generated.  This variable is intended for use in directories which
contain taggable source that `etags' does not understand.  

   Here is how Automake generates tags for its source, and for nodes in
its Texinfo file:

     ETAGS_ARGS = automake.in --lang=none \
      --regex='/^@node[ \t]+\([^,]+\)/\1/' automake.texi

   If you add filenames to `ETAGS_ARGS', you will probably also want to
set `TAGS_DEPENDENCIES'.  The contents of this variable are added
directly to the dependencies for the `tags' target.  

   Automake will also generate an `ID' target which will run `mkid' on
the source.  This is only supported on a directory-by-directory basis.  


File: automake1.4.info,  Node: Suffixes,  Prev: Tags,  Up: Miscellaneous

16.2 Handling new file extensions
=================================

It is sometimes useful to introduce a new implicit rule to handle a file
type that Automake does not know about.  If this is done, you must
notify GNU Make of the new suffixes.  This can be done by putting a list
of new suffixes in the `SUFFIXES' variable.  

   For instance, currently Automake does not provide any Java support.
If you wrote a macro to generate `.class' files from `.java' source
files, you would also need to add these suffixes to the list:

     SUFFIXES = .java .class


File: automake1.4.info,  Node: Include,  Next: Conditionals,  Prev: Miscellaneous,  Up: Top

17 Include
**********

To include another file (perhaps for common rules), the following
syntax is supported:

   include ($(srcdir)|$(top_srcdir))/filename

   Using files in the current directory:
     include $(srcdir)/Makefile.extra

     include Makefile.generated

   Using a file in the top level directory:
     include $(top_srcdir)/filename


File: automake1.4.info,  Node: Conditionals,  Next: Gnits,  Prev: Include,  Up: Top

18 Conditionals
***************

Automake supports a simple type of conditionals.

   Before using a conditional, you must define it by using
`AM_CONDITIONAL' in the `configure.in' file (*note Macros::).  The
`AM_CONDITIONAL' macro takes two arguments.

   The first argument to `AM_CONDITIONAL' is the name of the
conditional.  This should be a simple string starting with a letter and
containing only letters, digits, and underscores.

   The second argument to `AM_CONDITIONAL' is a shell condition,
suitable for use in a shell `if' statement.  The condition is evaluated
when `configure' is run.

   Conditionals typically depend upon options which the user provides to
the `configure' script.  Here is an example of how to write a
conditional which is true if the user uses the `--enable-debug' option.

     AC_ARG_ENABLE(debug,
     [  --enable-debug    Turn on debugging],
     [case "${enableval}" in
       yes) debug=true ;;
       no)  debug=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false])
     AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

   Here is an example of how to use that conditional in `Makefile.am':

     if DEBUG
     DBG = debug
     else
     DBG =
     endif
     noinst_PROGRAMS = $(DBG)

   This trivial example could also be handled using EXTRA_PROGRAMS
(*note A Program::).

   You may only test a single variable in an `if' statement.  The
`else' statement may be omitted.  Conditionals may be nested to any
depth.

   Note that conditionals in Automake are not the same as conditionals
in GNU Make.  Automake conditionals are checked at configure time by the
`configure' script, and affect the translation from `Makefile.in' to
`Makefile'.  They are based on options passed to `configure' and on
results that `configure' has discovered about the host system.  GNU
Make conditionals are checked at `make' time, and are based on
variables passed to the make program or defined in the `Makefile'.

   Automake conditionals will work with any make program.


File: automake1.4.info,  Node: Gnits,  Next: Cygnus,  Prev: Conditionals,  Up: Top

19 The effect of `--gnu' and `--gnits'
**************************************

The `--gnu' option (or `gnu' in the `AUTOMAKE_OPTIONS' variable) causes
`automake' to check the following:

   * The files `INSTALL', `NEWS', `README', `COPYING', `AUTHORS', and
     `ChangeLog' are required at the topmost directory of the package.

   * The options `no-installman' and `no-installinfo' are prohibited.

   Note that this option will be extended in the future to do even more
checking; it is advisable to be familiar with the precise requirements
of the GNU standards.  Also, `--gnu' can require certain non-standard
GNU programs to exist for use by various maintainer-only targets; for
instance in the future `pathchk' might be required for `make dist'.

   The `--gnits' option does everything that `--gnu' does, and checks
the following as well:

   * `make dist' will check to make sure the `NEWS' file has been
     updated to the current version.

   * The file `COPYING.LIB' is prohibited.  The LGPL is apparently
     considered a failed experiment.

   * `VERSION' is checked to make sure its format complies with Gnits
     standards.

   * If `VERSION' indicates that this is an alpha release, and the file
     `README-alpha' appears in the topmost directory of a package, then
     it is included in the distribution.  This is done in `--gnits'
     mode, and no other, because this mode is the only one where version
     number formats are constrained, and hence the only mode where
     Automake can automatically determine whether `README-alpha' should
     be included.

   * The file `THANKS' is required.


File: automake1.4.info,  Node: Cygnus,  Next: Extending,  Prev: Gnits,  Up: Top

20 The effect of `--cygnus'
***************************

Cygnus Solutions has slightly different rules for how a `Makefile.in'
is to be constructed.  Passing `--cygnus' to `automake' will cause any
generated `Makefile.in' to comply with Cygnus rules.

   Here are the precise effects of `--cygnus':

   * Info files are always created in the build directory, and not in
     the source directory.

   * `texinfo.tex' is not required if a Texinfo source file is
     specified.  The assumption is that the file will be supplied, but
     in a place that Automake cannot find.  This assumption is an
     artifact of how Cygnus packages are typically bundled.

   * `make dist' will look for files in the build directory as well as
     the source directory.  This is required to support putting info
     files into the build directory.

   * Certain tools will be searched for in the build tree as well as in
     the user's `PATH'.  These tools are `runtest', `expect',
     `makeinfo' and `texi2dvi'.

   * `--foreign' is implied.

   * The options `no-installinfo' and `no-dependencies' are implied.

   * The macros `AM_MAINTAINER_MODE' and `AM_CYGWIN32' are required.

   * The `check' target doesn't depend on `all'.

   GNU maintainers are advised to use `gnu' strictness in preference to
the special Cygnus mode.


File: automake1.4.info,  Node: Extending,  Next: Distributing,  Prev: Cygnus,  Up: Top

21 When Automake Isn't Enough
*****************************

Automake's implicit copying semantics means that many problems can be
worked around by simply adding some `make' targets and rules to
`Makefile.in'.  Automake will ignore these additions.

   There are some caveats to doing this.  Although you can overload a
target already used by Automake, it is often inadvisable, particularly
in the topmost directory of a non-flat package.  However, various useful
targets have a `-local' version you can specify in your `Makefile.in'.
Automake will supplement the standard target with these user-supplied
targets.

   The targets that support a local version are `all', `info', `dvi',
`check', `install-data', `install-exec', `uninstall', and the various
`clean' targets (`mostlyclean', `clean', `distclean', and
`maintainer-clean').  Note that there are no `uninstall-exec-local' or
`uninstall-data-local' targets; just use `uninstall-local'.  It doesn't
make sense to uninstall just data or just executables.  

   For instance, here is one way to install a file in `/etc':

     install-data-local:
             $(INSTALL_DATA) $(srcdir)/afile /etc/afile

   Some targets also have a way to run another target, called a "hook",
after their work is done.  The hook is named after the principal target,
with `-hook' appended.  The targets allowing hooks are `install-data',
`install-exec', `dist', and `distcheck'.  

   For instance, here is how to create a hard link to an installed
program:

     install-exec-hook:
             ln $(bindir)/program $(bindir)/proglink


File: automake1.4.info,  Node: Distributing,  Next: Future,  Prev: Extending,  Up: Top

22 Distributing `Makefile.in's
******************************

Automake places no restrictions on the distribution of the resulting
`Makefile.in's.  We still encourage software authors to distribute
their work under terms like those of the GPL, but doing so is not
required to use Automake.

   Some of the files that can be automatically installed via the
`--add-missing' switch do fall under the GPL; examine each file to see.


File: automake1.4.info,  Node: Future,  Next: Macro and Variable Index,  Prev: Distributing,  Up: Top

23 Some ideas for the future
****************************

Here are some things that might happen in the future:

   * HTML support.

   * The output will be cleaned up.  For instance, only variables which
     are actually used will appear in the generated `Makefile.in'.

   * There will be support for automatically recoding a distribution.
     The intent is to allow a maintainer to use whatever character set
     is most convenient locally, but for all distributions to be
     Unicode or ISO 10646 with the UTF-8 encoding.

   * Rewrite in Guile.  This won't happen in the near future, but it
     will eventually happen.


File: automake1.4.info,  Node: Macro and Variable Index,  Next: General Index,  Prev: Future,  Up: Top

Macro and Variable Index
************************

 [index ]
* Menu:

* _LDADD:                                A Program.           (line  65)
* _LDFLAGS:                              A Program.           (line  87)
* _LIBADD:                               A Library.           (line  27)
* _SOURCES:                              A Program.           (line  25)
* _TEXINFOS:                             Texinfo.             (line  24)
* AC_ARG_PROGRAM:                        Requirements.        (line  23)
* AC_CANONICAL_HOST:                     Optional.            (line  36)
* AC_CANONICAL_SYSTEM:                   Optional.            (line  41)
* AC_CHECK_PROG:                         Optional.            (line 136)
* AC_CHECK_PROGS:                        Optional.            (line 136)
* AC_CHECK_TOOL:                         Optional.            (line 136)
* AC_CONFIG_AUX_DIR:                     Optional.            (line  22)
* AC_CONFIG_HEADER:                      Optional.            (line  14)
* AC_DECL_YYTEXT:                        Optional.            (line  98)
* AC_F77_LIBRARY_LDFLAGS:                Optional.            (line  84)
* AC_FUNC_ALLOCA:                        Optional.            (line  59)
* AC_FUNC_FNMATCH:                       Optional.            (line  59)
* AC_FUNC_GETLOADAVG:                    Optional.            (line  59)
* AC_FUNC_MEMCMP:                        Optional.            (line  59)
* AC_OUTPUT:                             Requirements.        (line  52)
* AC_PATH_PROG:                          Optional.            (line 136)
* AC_PATH_PROGS:                         Optional.            (line 136)
* AC_PATH_XTRA:                          Optional.            (line  28)
* AC_PROG_CXX:                           Optional.            (line  73)
* AC_PROG_F77:                           Optional.            (line  78)
* AC_PROG_INSTALL:                       Requirements.        (line  31)
* AC_PROG_LEX:                           Optional.            (line 102)
* AC_PROG_MAKE_SET:                      Requirements.        (line  26)
* AC_PROG_RANLIB:                        Optional.            (line  69)
* AC_PROG_YACC:                          Optional.            (line  94)
* AC_REPLACE_FUNCS:                      Optional.            (line  59)
* AC_REPLACE_GNU_GETOPT:                 Optional.            (line  59)
* AC_STRUCT_ST_BLOCKS:                   Optional.            (line  59)
* AC_SUBST:                              Optional.            (line 136)
* ALL_LINGUAS:                           Optional.            (line 107)
* AM_C_PROTOTYPES <1>:                   ANSI.                (line  30)
* AM_C_PROTOTYPES <2>:                   Macros.              (line  43)
* AM_C_PROTOTYPES:                       Optional.            (line 111)
* AM_CONDITIONAL:                        Conditionals.        (line   8)
* AM_CONFIG_HEADER:                      Macros.              (line   9)
* am_cv_sys_posix_termios:               Macros.              (line  86)
* AM_FUNC_ERROR_AT_LINE:                 Macros.              (line  28)
* AM_FUNC_MKTIME:                        Macros.              (line  32)
* AM_FUNC_OBSTACK:                       Macros.              (line  36)
* AM_FUNC_STRTOD <1>:                    Macros.              (line  24)
* AM_FUNC_STRTOD:                        Optional.            (line  59)
* AM_GNU_GETTEXT:                        Optional.            (line 117)
* AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL:  Macros.              (line  48)
* AM_INIT_AUTOMAKE:                      Requirements.        (line   8)
* AM_MAINTAINER_MODE:                    Optional.            (line 125)
* AM_PATH_LISPDIR:                       Macros.              (line  58)
* AM_PROG_LIBTOOL:                       Optional.            (line  88)
* AM_WITH_REGEX:                         Optional.            (line  59)
* AUTOMAKE_OPTIONS <1>:                  Dependencies.        (line  40)
* AUTOMAKE_OPTIONS <2>:                  ANSI.                (line  14)
* AUTOMAKE_OPTIONS:                      Options.             (line   8)
* bin_PROGRAMS:                          A Program.           (line   6)
* bin_SCRIPTS:                           Scripts.             (line  22)
* build_alias:                           Optional.            (line  41)
* BUILT_SOURCES:                         Sources.             (line   8)
* check_LTLIBRARIES:                     A Shared Library.    (line  18)
* CLEANFILES:                            Clean.               (line  11)
* COMPILE:                               Program variables.   (line  27)
* CXX:                                   C++ Support.         (line  16)
* CXXCOMPILE:                            C++ Support.         (line  22)
* CXXFLAGS:                              C++ Support.         (line  19)
* CXXLINK:                               C++ Support.         (line  26)
* DATA <1>:                              Data.                (line   7)
* DATA:                                  Uniform.             (line  73)
* data_DATA:                             Data.                (line   9)
* DEJATOOL:                              Tests.               (line  40)
* DESTDIR:                               Install.             (line  38)
* DIST_SUBDIRS:                          Dist.                (line  33)
* DISTCLEANFILES:                        Clean.               (line  11)
* ELCFILES:                              Emacs Lisp.          (line  11)
* ETAGS_ARGS:                            Tags.                (line  18)
* EXPECT:                                Tests.               (line  40)
* EXTRA_DIST:                            Dist.                (line  25)
* EXTRA_PROGRAMS:                        A Program.           (line  54)
* F77:                                   Fortran 77 Support.  (line  16)
* F77COMPILE:                            Fortran 77 Support.  (line  25)
* FFLAGS:                                Fortran 77 Support.  (line  19)
* FLINK:                                 Fortran 77 Support.  (line  29)
* HAVE_PTRDIFF_T:                        Macros.              (line  92)
* HEADERS <1>:                           Uniform.             (line  73)
* HEADERS:                               Headers.             (line   8)
* host_alias:                            Optional.            (line  36)
* host_triplet:                          Optional.            (line  36)
* include_HEADERS:                       Headers.             (line  16)
* INCLUDES:                              Program variables.   (line  15)
* info_TEXINFOS:                         Texinfo.             (line  10)
* LDADD:                                 A Program.           (line  58)
* LDFLAGS:                               Program variables.   (line  11)
* lib_LIBRARIES:                         A Library.           (line   6)
* lib_LTLIBRARIES:                       A Shared Library.    (line  18)
* LIBADD:                                A Library.           (line  27)
* libexec_PROGRAMS:                      A Program.           (line   6)
* libexec_SCRIPTS:                       Scripts.             (line  22)
* LIBOBJS:                               Optional.            (line  65)
* LIBRARIES:                             Uniform.             (line  73)
* LINK:                                  Program variables.   (line  31)
* LISP <1>:                              Uniform.             (line  73)
* LISP:                                  Emacs Lisp.          (line   6)
* lisp_LISP:                             Emacs Lisp.          (line   6)
* localstate_DATA:                       Data.                (line   9)
* MAINTAINERCLEANFILES:                  Clean.               (line  11)
* man_MANS:                              Man pages.           (line  11)
* MANS <1>:                              Uniform.             (line  73)
* MANS:                                  Man pages.           (line  11)
* MOSTLYCLEANFILES:                      Clean.               (line  11)
* noinst_HEADERS:                        Headers.             (line   6)
* noinst_LIBRARIES:                      A Library.           (line   6)
* noinst_LISP:                           Emacs Lisp.          (line   6)
* noinst_LTLIBRARIES:                    A Shared Library.    (line  18)
* noinst_PROGRAMS:                       A Program.           (line   6)
* noinst_SCRIPTS:                        Scripts.             (line  22)
* oldinclude_HEADERS:                    Headers.             (line  16)
* OMIT_DEPENDENCIES:                     Dependencies.        (line  27)
* PACKAGE <1>:                           Requirements.        (line  10)
* PACKAGE <2>:                           Uniform.             (line  25)
* PACKAGE:                               Dist.                (line   9)
* pkgdata_DATA:                          Data.                (line   9)
* pkgdata_SCRIPTS:                       Scripts.             (line  22)
* pkgdatadir:                            Uniform.             (line  17)
* pkginclude_HEADERS:                    Headers.             (line  16)
* pkgincludedir:                         Uniform.             (line  17)
* pkglib_LIBRARIES:                      A Library.           (line   6)
* pkglib_LTLIBRARIES:                    A Shared Library.    (line  18)
* pkglib_PROGRAMS:                       A Program.           (line   6)
* pkglibdir:                             Uniform.             (line  17)
* PROGRAMS:                              Uniform.             (line  15)
* ptrdiff_t:                             Macros.              (line  92)
* RFLAGS:                                Fortran 77 Support.  (line  22)
* RUNTEST:                               Tests.               (line  40)
* RUNTESTDEFAULTFLAGS:                   Tests.               (line  35)
* RUNTESTFLAGS:                          Tests.               (line  40)
* sbin_PROGRAMS:                         A Program.           (line   6)
* sbin_SCRIPTS:                          Scripts.             (line  22)
* SCRIPTS <1>:                           Scripts.             (line   9)
* SCRIPTS:                               Uniform.             (line  73)
* sharedstate_DATA:                      Data.                (line   9)
* SOURCES:                               A Program.           (line  25)
* SUBDIRS <1>:                           Depth.               (line  11)
* SUBDIRS:                               Top level.           (line   8)
* SUFFIXES:                              Suffixes.            (line   9)
* sysconf_DATA:                          Data.                (line   9)
* TAGS_DEPENDENCIES:                     Tags.                (line  28)
* target_alias:                          Optional.            (line  41)
* TESTS:                                 Tests.               (line  26)
* TESTS_ENVIRONMENT:                     Tests.               (line  26)
* TEXINFO_TEX:                           Texinfo.             (line  35)
* TEXINFOS <1>:                          Texinfo.             (line  10)
* TEXINFOS <2>:                          Uniform.             (line  73)
* TEXINFOS:                              Texinfo.             (line  24)
* VERSION <1>:                           Requirements.        (line  10)
* VERSION:                               Dist.                (line   9)
* WITH_DMALLOC:                          Macros.              (line  96)
* WITH_REGEX:                            Macros.              (line 102)
* YACC:                                  Optional.            (line  94)


File: automake1.4.info,  Node: General Index,  Prev: Macro and Variable Index,  Up: Top

General Index
*************

 [index ]
* Menu:

* ## (special Automake comment):         General Operation.   (line  49)
* --acdir:                               Invoking aclocal.    (line  28)
* --add-missing:                         Invoking Automake.   (line  30)
* --amdir:                               Invoking Automake.   (line  41)
* --build-dir:                           Invoking Automake.   (line  45)
* --cygnus:                              Invoking Automake.   (line  56)
* --enable-maintainer-mode:              Optional.            (line 120)
* --foreign:                             Invoking Automake.   (line  60)
* --generate-deps:                       Invoking Automake.   (line  81)
* --gnits:                               Invoking Automake.   (line  64)
* --gnu:                                 Invoking Automake.   (line  68)
* --help <1>:                            Invoking aclocal.    (line  32)
* --help:                                Invoking Automake.   (line  72)
* --include-deps:                        Invoking Automake.   (line  76)
* --no-force:                            Invoking Automake.   (line  91)
* --output:                              Invoking aclocal.    (line  39)
* --output-dir:                          Invoking Automake.   (line  98)
* --print-ac-dir:                        Invoking aclocal.    (line  42)
* --srcdir-name:                         Invoking Automake.   (line 104)
* --verbose <1>:                         Invoking aclocal.    (line  48)
* --verbose:                             Invoking Automake.   (line 111)
* --version <1>:                         Invoking aclocal.    (line  51)
* --version:                             Invoking Automake.   (line 115)
* --with-dmalloc:                        Macros.              (line  96)
* --with-regex:                          Macros.              (line 102)
* -a:                                    Invoking Automake.   (line  30)
* -enable-debug, example:                Conditionals.        (line  20)
* -gnits, complete description:          Gnits.               (line  20)
* -gnu, complete description:            Gnits.               (line   6)
* -gnu, required files:                  Gnits.               (line   6)
* -hook targets:                         Extending.           (line  29)
* -i:                                    Invoking Automake.   (line  76)
* -I:                                    Invoking aclocal.    (line  35)
* -local targets:                        Extending.           (line  10)
* -o:                                    Invoking Automake.   (line  98)
* -v:                                    Invoking Automake.   (line 111)
* @ALLOCA@, special handling:            LIBOBJS.             (line   6)
* @LIBOBJS@, special handling:           LIBOBJS.             (line   6)
* @LTLIBOBJS@, special handling:         A Shared Library.    (line  28)
* _DATA primary, defined:                Data.                (line   6)
* _DEPENDENCIES, defined:                A Program.           (line  89)
* _HEADERS primary, defined:             Headers.             (line   6)
* _JAVA primary, defined:                Java.                (line   6)
* _LDFLAGS, defined:                     A Program.           (line  85)
* _LIBADD primary, defined:              A Library.           (line  25)
* _LIBRARIES primary, defined:           A Library.           (line   6)
* _LISP primary, defined:                Emacs Lisp.          (line   6)
* _LTLIBRARIES primary, defined:         A Shared Library.    (line  10)
* _MANS primary, defined:                Man pages.           (line   6)
* _PROGRAMS primary variable:            Uniform.             (line  12)
* _SCRIPTS primary, defined:             Scripts.             (line   6)
* _SOURCES and header files:             A Program.           (line  31)
* _SOURCES primary, defined:             A Program.           (line  24)
* _TEXINFOS primary, defined:            Texinfo.             (line   6)
* AC_OUTPUT, scanning:                   Requirements.        (line  46)
* acinclude.m4, defined:                 Complete.            (line  21)
* aclocal program, introduction:         Complete.            (line  21)
* aclocal, extending:                    Extending aclocal.   (line   6)
* aclocal, Invoking:                     Invoking aclocal.    (line   6)
* aclocal.m4, preexisting:               Complete.            (line  21)
* Adding new SUFFIXES:                   Suffixes.            (line   6)
* all:                                   Extending.           (line  22)
* all-local:                             Extending.           (line  17)
* AM_INIT_AUTOMAKE, example use:         Complete.            (line  11)
* ansi2knr:                              ANSI.                (line  14)
* Automake constraints:                  Introduction.        (line  22)
* Automake options:                      Invoking Automake.   (line  26)
* Automake requirements <1>:             Introduction.        (line  27)
* Automake requirements:                 Requirements.        (line   6)
* Automake, invoking:                    Invoking Automake.   (line   6)
* Automake, recursive operation:         General Operation.   (line  39)
* Automatic linker selection:            How the Linker is Chosen.
                                                              (line   6)
* BUGS, reporting:                       Introduction.        (line  31)
* BUILT_SOURCES, defined:                Sources.             (line   6)
* C++ support:                           C++ Support.         (line   6)
* canonicalizing Automake macros:        Canonicalization.    (line   6)
* cfortran:                              Mixing Fortran 77 With C and C++.
                                                              (line   6)
* check:                                 Extending.           (line  22)
* check primary prefix, definition:      Uniform.             (line  69)
* check-local:                           Extending.           (line  17)
* check_LTLIBRARIES, not allowed:        A Shared Library.    (line  18)
* clean-local:                           Extending.           (line  17)
* Comment, special to Automake:          General Operation.   (line  49)
* Complete example:                      Complete.            (line   6)
* Conditional example,  -enable-debug:   Conditionals.        (line  20)
* Conditionals:                          Conditionals.        (line   6)
* config.guess:                          Invoking Automake.   (line  28)
* configure.in, from GNU Hello:          Hello.               (line  17)
* configure.in, scanning:                configure.           (line   6)
* Constraints of Automake:               Introduction.        (line  22)
* cpio example:                          Uniform.             (line  34)
* ctags Example:                         etags.               (line   6)
* cvs-dist:                              General Operation.   (line  12)
* cvs-dist, non-standard example:        General Operation.   (line  12)
* Cygnus strictness:                     Cygnus.              (line   6)
* DATA primary, defined:                 Data.                (line   6)
* de-ANSI-fication, defined:             ANSI.                (line   6)
* Deep package:                          Depth.               (line   6)
* dejagnu:                               Tests.               (line  40)
* dist <1>:                              Dependencies.        (line  18)
* dist:                                  Dist.                (line   9)
* dist-hook <1>:                         Dist.                (line  35)
* dist-hook:                             Extending.           (line  32)
* dist-shar:                             Options.             (line  36)
* dist-tarZ:                             Options.             (line  48)
* dist-zip:                              Options.             (line  41)
* distcheck:                             Dist.                (line  47)
* distclean-local:                       Extending.           (line  17)
* dmalloc, support for:                  Macros.              (line  96)
* dvi:                                   Extending.           (line  22)
* dvi-local:                             Extending.           (line  17)
* E-mail, bug reports:                   Introduction.        (line  31)
* EDITION Texinfo macro:                 Texinfo.             (line  12)
* else:                                  Conditionals.        (line  35)
* endif:                                 Conditionals.        (line  35)
* etags Example:                         etags.               (line   6)
* Example conditional -enable-debug:     Conditionals.        (line  20)
* Example of recursive operation:        General Operation.   (line  39)
* Example of shared libraries:           A Shared Library.    (line  10)
* Example, ctags and etags:              etags.               (line   6)
* Example, EXTRA_PROGRAMS:               Uniform.             (line  34)
* Example, GNU Hello:                    Hello.               (line   6)
* Example, handling Texinfo files:       Hello.               (line  62)
* Example, mixed language:               Mixing Fortran 77 With C and C++.
                                                              (line  37)
* Example, regression test:              Hello.               (line  70)
* Exit status 77, special interpretation: Tests.              (line  17)
* Extending aclocal:                     Extending aclocal.   (line   6)
* Extending list of installation directories: Uniform.        (line  53)
* Extra files distributed with Automake: Invoking Automake.   (line  28)
* EXTRA_, prepending:                    Uniform.             (line  27)
* EXTRA_prog_SOURCES, defined:           A Program.           (line  37)
* EXTRA_PROGRAMS, defined <1>:           Uniform.             (line  34)
* EXTRA_PROGRAMS, defined:               A Program.           (line  49)
* Files distributed with Automake:       Invoking Automake.   (line  28)
* First line of Makefile.am:             General Operation.   (line  55)
* Flat package:                          Depth.               (line   6)
* FLIBS, defined:                        Mixing Fortran 77 With C and C++.
                                                              (line  21)
* foreign strictness:                    Strictness.          (line  10)
* Fortran 77 support:                    Fortran 77 Support.  (line   6)
* Fortran 77, mixing with C and C++:     Mixing Fortran 77 With C and C++.
                                                              (line   6)
* Fortran 77, Preprocessing:             Preprocessing Fortran 77.
                                                              (line   6)
* Future directions:                     Future.              (line   6)
* Gettext support:                       gettext.             (line   6)
* gnits strictness:                      Strictness.          (line  10)
* GNU Gettext support:                   gettext.             (line   6)
* GNU Hello, configure.in:               Hello.               (line  17)
* GNU Hello, example:                    Hello.               (line   6)
* GNU make extensions:                   General Operation.   (line  19)
* GNU Makefile standards:                Introduction.        (line  12)
* Guile rewrite:                         Future.              (line  18)
* Header files in _SOURCES:              A Program.           (line  31)
* HEADERS primary, defined:              Headers.             (line   6)
* HEADERS, installation directories:     Headers.             (line  16)
* Hello example:                         Hello.               (line   6)
* Hello, configure.in:                   Hello.               (line  17)
* hook targets:                          Extending.           (line  29)
* HP-UX 10, lex problems:                Macros.              (line  74)
* HTML support, example:                 Uniform.             (line  60)
* id:                                    Tags.                (line  31)
* if:                                    Conditionals.        (line  35)
* include:                               Include.             (line   6)
* INCLUDES, example usage:               Hello.               (line  78)
* info <1>:                              Extending.           (line  22)
* info:                                  Options.             (line  61)
* info-local:                            Extending.           (line  17)
* install:                               Install.             (line  17)
* install-data <1>:                      Install.             (line  17)
* install-data:                          Extending.           (line  22)
* install-data-hook:                     Extending.           (line  32)
* install-data-local <1>:                Install.             (line  24)
* install-data-local:                    Extending.           (line  17)
* install-exec <1>:                      Extending.           (line  22)
* install-exec:                          Install.             (line  17)
* install-exec-hook:                     Extending.           (line  32)
* install-exec-local <1>:                Install.             (line  24)
* install-exec-local:                    Extending.           (line  17)
* install-info <1>:                      Texinfo.             (line  46)
* install-info:                          Options.             (line  61)
* install-info target:                   Texinfo.             (line  46)
* install-man <1>:                       Man pages.           (line  18)
* install-man:                           Options.             (line  67)
* install-man target:                    Man pages.           (line  13)
* install-strip:                         Install.             (line  20)
* Installation directories, extending list: Uniform.          (line  53)
* Installation support:                  Install.             (line   6)
* installdirs:                           Install.             (line  20)
* Installing headers:                    Headers.             (line  16)
* Installing scripts:                    Scripts.             (line  22)
* Invoking aclocal:                      Invoking aclocal.    (line   6)
* Invoking Automake:                     Invoking Automake.   (line   6)
* JAVA primary, defined:                 Java.                (line   6)
* JAVA restrictions:                     Java.                (line  13)
* lex problems with HP-UX 10:            Macros.              (line  74)
* lex, multiple lexers:                  Yacc and Lex.        (line  40)
* LIBADD primary, defined:               A Library.           (line  25)
* LIBRARIES primary, defined:            A Library.           (line   6)
* Linking Fortran 77 with C and C++:     Mixing Fortran 77 With C and C++.
                                                              (line   6)
* LISP primary, defined:                 Emacs Lisp.          (line   6)
* local targets:                         Extending.           (line  10)
* LTLIBRARIES primary, defined:          A Shared Library.    (line  10)
* Macros Automake recognizes:            Optional.            (line   6)
* Macros, overriding:                    General Operation.   (line  32)
* make check:                            Tests.               (line   6)
* make clean support:                    Clean.               (line   6)
* make dist:                             Dist.                (line   6)
* make distcheck:                        Dist.                (line   6)
* make install support:                  Install.             (line   6)
* Make targets, overriding:              General Operation.   (line  26)
* Makefile.am, first line:               General Operation.   (line  55)
* MANS primary, defined:                 Man pages.           (line   6)
* mdate-sh:                              Texinfo.             (line  12)
* Mixed language example:                Mixing Fortran 77 With C and C++.
                                                              (line  37)
* Mixing Fortran 77 with C and C++:      Mixing Fortran 77 With C and C++.
                                                              (line   6)
* Mixing Fortran 77 with C and/or C++:   Mixing Fortran 77 With C and C++.
                                                              (line   6)
* mostlyclean-local:                     Extending.           (line  17)
* Multiple configure.in files:           Invoking Automake.   (line   6)
* Multiple lex lexers:                   Yacc and Lex.        (line  40)
* Multiple yacc parsers:                 Yacc and Lex.        (line  40)
* no-dependencies:                       Dependencies.        (line  40)
* no-installinfo:                        Texinfo.             (line  46)
* no-installman:                         Man pages.           (line  18)
* no-texinfo.tex:                        Texinfo.             (line  42)
* noinst primary prefix, definition:     Uniform.             (line  66)
* noinstall-info target:                 Texinfo.             (line  46)
* noinstall-man target:                  Man pages.           (line  13)
* Non-GNU packages:                      Strictness.          (line   6)
* Non-standard targets:                  General Operation.   (line  12)
* Option, ansi2knr:                      Options.             (line  20)
* Option, check-news:                    Options.             (line  27)
* Option, cygnus:                        Options.             (line  15)
* Option, dejagnu:                       Options.             (line  31)
* Option, dist-shar:                     Options.             (line  34)
* Option, dist-tarZ:                     Options.             (line  44)
* Option, dist-zip:                      Options.             (line  39)
* Option, foreign:                       Options.             (line  15)
* Option, gnits:                         Options.             (line  15)
* Option, gnu:                           Options.             (line  15)
* Option, no-dependencies:               Options.             (line  51)
* Option, no-installinfo:                Options.             (line  58)
* Option, no-installman:                 Options.             (line  64)
* Option, no-texinfo:                    Options.             (line  70)
* Option, readme-alpha:                  Options.             (line  74)
* Option, version:                       Options.             (line  83)
* Options, Automake:                     Invoking Automake.   (line  26)
* Overriding make macros:                General Operation.   (line  32)
* Overriding make targets:               General Operation.   (line  26)
* Overriding SUBDIRS:                    Top level.           (line  26)
* Package, deep:                         Depth.               (line   6)
* Package, Flat:                         Depth.               (line   6)
* Package, shallow:                      Depth.               (line   6)
* pkgdatadir, defined:                   Uniform.             (line  17)
* pkgincludedir, defined:                Uniform.             (line  17)
* pkglibdir, defined:                    Uniform.             (line  17)
* POSIX termios headers:                 Macros.              (line  86)
* Preprocessing Fortran 77:              Preprocessing Fortran 77.
                                                              (line   6)
* Primary variable, DATA:                Data.                (line   6)
* Primary variable, defined:             Uniform.             (line  12)
* Primary variable, HEADERS:             Headers.             (line   6)
* Primary variable, JAVA:                Java.                (line   6)
* Primary variable, LIBADD:              A Library.           (line  25)
* Primary variable, LIBRARIES:           A Library.           (line   6)
* Primary variable, LISP:                Emacs Lisp.          (line   6)
* Primary variable, LTLIBRARIES:         A Shared Library.    (line  10)
* Primary variable, MANS:                Man pages.           (line   6)
* Primary variable, PROGRAMS:            Uniform.             (line  12)
* Primary variable, SCRIPTS:             Scripts.             (line   6)
* Primary variable, SOURCES:             A Program.           (line  24)
* Primary variable, TEXINFOS:            Texinfo.             (line   6)
* prog_LDADD, defined:                   A Program.           (line  60)
* PROGRAMS primary variable:             Uniform.             (line  12)
* PROGRAMS, bindir:                      A Program.           (line   6)
* Ratfor programs:                       Preprocessing Fortran 77.
                                                              (line   6)
* README-alpha:                          Gnits.               (line  32)
* Recognized macros by Automake:         Optional.            (line   6)
* Recursive operation of Automake:       General Operation.   (line  39)
* regex package:                         Macros.              (line 102)
* Regression test example:               Hello.               (line  70)
* Reporting BUGS:                        Introduction.        (line  31)
* Requirements of Automake:              Requirements.        (line   6)
* Requirements, Automake:                Introduction.        (line  27)
* Restrictions for JAVA:                 Java.                (line  13)
* rx package:                            Macros.              (line 102)
* Scanning configure.in:                 configure.           (line   6)
* SCRIPTS primary, defined:              Scripts.             (line   6)
* SCRIPTS, installation directories:     Scripts.             (line  22)
* Selecting the linker automatically:    How the Linker is Chosen.
                                                              (line   6)
* Shallow package:                       Depth.               (line   6)
* Shared libraries, support for:         A Shared Library.    (line   6)
* SOURCES primary, defined:              A Program.           (line  24)
* Special Automake comment:              General Operation.   (line  49)
* Strictness, defined:                   Strictness.          (line  10)
* Strictness, foreign:                   Strictness.          (line  10)
* Strictness, gnits:                     Strictness.          (line  10)
* Strictness, gnu:                       Strictness.          (line  10)
* SUBDIRS, deep package:                 Depth.               (line  13)
* SUBDIRS, explained:                    Top level.           (line   6)
* SUBDIRS, overriding:                   Top level.           (line  26)
* suffix .la, defined:                   A Shared Library.    (line  10)
* suffix .lo, defined:                   A Shared Library.    (line  23)
* SUFFIXES, adding:                      Suffixes.            (line   6)
* Support for C++:                       C++ Support.         (line   6)
* Support for Fortran 77:                Fortran 77 Support.  (line   6)
* Support for GNU Gettext:               gettext.             (line   6)
* tags:                                  Tags.                (line  10)
* TAGS support:                          Tags.                (line   6)
* Target, install-info:                  Texinfo.             (line  46)
* Target, install-man:                   Man pages.           (line  13)
* Target, noinstall-info:                Texinfo.             (line  46)
* Target, noinstall-man:                 Man pages.           (line  13)
* termios POSIX headers:                 Macros.              (line  86)
* Test suites:                           Tests.               (line   6)
* Texinfo file handling example:         Hello.               (line  62)
* Texinfo macro, EDITION:                Texinfo.             (line  12)
* Texinfo macro, UPDATED:                Texinfo.             (line  12)
* Texinfo macro, VERSION:                Texinfo.             (line  12)
* texinfo.tex:                           Texinfo.             (line  29)
* TEXINFOS primary, defined:             Texinfo.             (line   6)
* Uniform naming scheme:                 Uniform.             (line   6)
* uninstall <1>:                         Extending.           (line  22)
* uninstall:                             Install.             (line  20)
* uninstall-local:                       Extending.           (line  17)
* UPDATED Texinfo macro:                 Texinfo.             (line  12)
* VERSION Texinfo macro:                 Texinfo.             (line  12)
* yacc, multiple parsers:                Yacc and Lex.        (line  40)
* ylwrap:                                Yacc and Lex.        (line  40)
* zardoz example:                        Complete.            (line  33)



Tag Table:
Node: Top1138
Node: Introduction2750
Node: Generalities4172
Node: General Operation4709
Node: Depth7029
Node: Strictness8043
Node: Uniform9498
Node: Canonicalization12809
Node: Examples13488
Node: Complete13820
Node: Hello15793
Node: etags18424
Node: Invoking Automake19981
Node: configure24602
Node: Requirements25526
Node: Optional27918
Node: Invoking aclocal33502
Node: Macros35451
Node: Extending aclocal40037
Node: Top level41021
Node: Programs43269
Node: A Program44096
Node: A Library48447
Node: LIBOBJS49568
Node: A Shared Library50213
Node: Program variables52071
Node: Yacc and Lex53390
Node: C++ Support57443
Node: Fortran 77 Support58227
Ref: Fortran 77 Support-Footnote-159715
Node: Preprocessing Fortran 7759918
Node: Compiling Fortran 77 Files60523
Node: Mixing Fortran 77 With C and C++61097
Ref: Mixing Fortran 77 With C and C++-Footnote-163468
Node: How the Linker is Chosen63771
Node: Fortran 77 and Autoconf66335
Node: Support for Other Languages66762
Node: ANSI67181
Node: Dependencies69625
Node: Other objects72117
Node: Scripts72713
Node: Headers73572
Node: Data74245
Node: Sources74819
Node: Other GNU Tools75555
Node: Emacs Lisp76046
Node: gettext77111
Node: Guile77765
Node: Libtool78322
Node: Java78576
Node: Documentation79243
Node: Texinfo79550
Node: Man pages81894
Node: Install83276
Node: Clean85640
Node: Dist86128
Node: Tests88622
Node: Options90680
Node: Miscellaneous94114
Node: Tags94452
Node: Suffixes95790
Node: Include96427
Node: Conditionals96874
Node: Gnits99005
Node: Cygnus100713
Node: Extending102118
Node: Distributing103782
Node: Future104302
Node: Macro and Variable Index105038
Node: General Index116824

End Tag Table
