mingw32 popt
========================================================================
This is the popt(3) command line option parsing library. While it is
similiar to getopt(3), it contains a number of enhancements, including:

        1) popt is fully reentrant
        2) popt can parse arbitrary argv[] style arrays while 
           getopt(3) makes this quite difficult
        3) popt allows users to alias command line arguments
        4) popt provides convience functions for parsing strings
           into argv[] style arrays

This distribution incorporates pre-built binary components, which
have been specifically compiled for the "mingw32" subsystem; in
other words, they comprise binary executables and object libraries
suitable for native use on Microsoft's 32-bit Windows operating
system. As such, the libiconv packages should be installed into the
/mingw directory (which is usually, but not always, C:\MinGW).

The binaries and object libraries provided by the popt packages
have runtime dependencies detailed below (standard components of the
operating system are not listed).

NOTE1: based on the rpm5.org version of popt, rather than the
       rpm.org version. Whatever Jeff Johnston's faults, he has been
       more intimately involved with the rpm codebase for a longer
       period than anyone else -- if that's good enough for OpenPKG,
       it's good enough for me:
       http://trainofthoughts.org/blog/2008/01/06/rpm5-vs-rpm/
       Besides, one of the "selling points" of the rpm5 version is they
       claim it is more portable and less linux-centric. MinGW != linux,
       so that's a good thing for us.

NOTE2: Will read configuration files from two locations:
       "Global" configuration:
         1a) if libpopt-0.dll is in a directory named "bin", then
               $(dlldir)/../etc/popt
         1b) otherwise: $(dlldir)/etc/popt
       "User" configuration:
         2) %APPDATA%/popt.conf (actually, FOLDERID_RoamingAppData on
            Vista and above, CSIDL_APPDATA otherwise)

Runtime requirements
  libintl-0.17-1-mingw32-dll-8.tar.lzma
  libiconv-1.13.1-1-mingw32-dll-2.tar.lzma

Build requirements (these, or newer)
  MinGW compiler
    binutils-2.19.1-mingw32-bin.tar.gz
    gcc-core-4.4.0-mingw32-bin.tar.gz
    gcc-core-4.4.0-mingw32-dll.tar.gz
    mingwrt-3.15.2-mingw32-dev.tar.gz
    mingwrt-3.15.2-mingw32-dll.tar.gz
    w32api-3.13-mingw32-dev.tar.gz
    gmp-4.2.4-mingw32-dll.tar.gz
    mpfr-2.4.1-mingw32-dll.tar.gz
 
  Devel Tools and Dependent Libraries 
    gettext-0.17-1-mingw32-bin.tar.lzma
    gettext-0.17-1-mingw32-dev.tar.lzma
    libgettextpo-0.17-1-mingw32-dll-0.tar.lzma
    autoconf-6-1-mingw32-bin.tar.lzma
    autoconf2.5-2.63-1-mingw32-bin.tar.lzma
    automake-4-1-mingw32-bin.tar.lzma
    automake1.11-1.11-1-mingw32-bin.tar.lzma
    libtool-2.2.7a-1-mingw32-bin.tar.lzma

<<<< FIXME: fill this in as part of mingw-get installer rollout >>>>> 
  MSYS Environment
    msysCORE-1.0.11-bin.tar.gz (e.g. stock MSYS 1.0.11 installation)
    cvs-1.11.22-MSYS-1.0.11-1-bin.tar.gz
    perl-5.6.1-MSYS-1.0.11-1.tar.bz2
    crypt-1.1-1-MSYS-1.0.11-1.tar.bz2
    coreutils-5.97-MSYS-1.0.11-snapshot.tar.bz2
<<<< END FIXME >>>>
     
Canonical homepage:
  http://rpm5.org/

Canonical download:
  http://rpm5.org/files/popt/

License:
  X11

Language:
  C

========================================================================

Build instructions:
  unpack popt-1.15-1-mingw32-src.tar.bz2
  unpack popt-1.15-1-mingwPORT.tar.bz2
  cd popt-1.15/mingwPORT
  ./mingwPORT.sh [--no-cleanup] [--check]

This will create:
  popt-1.15-1-mingw32-src.tar.bz2
  libpopt-1.15-1-mingw32-dll-0.tar.bz2
  libpopt-1.15-1-mingw32-dev.tar.bz2
  popt-1.15-1-mingw32-lang.tar.bz2
  popt-1.15-1-mingw32-lic.tar.bz2
  popt-1.15-1-mingw32-doc.tar.bz2

========================================================================

Test suite results
This section of this document is updated with each new release.
No history is maintained here.

PASS testit.sh
=============
1 test passed
=============

(this actually includes 59 subtests)

========================================================================

Port Notes:

libpopt exports variables of complex (struct) type. On more advanced
systems (cygwin gcc-3.4.x, mingw32/64 gcc) symbols of this sort are
somewhat supported using auto-import and "pseudo-relocs" [1].
Unfortunately, this support is not foolproof; often intrusive changes
to the client application are necessary (such as not declaring poptOption
structs const). To partially address this issue, this port follows the
lead of the GnuWin32 project, and explicitly declares these variables
(DATA exports) using declspec(dllexport) [when compiling the DLL itself]
and declspec(dllimport) [when compiling clients].

[1] see  'info -n WIN32 -f /c/MinGW/info/ld.info'

So, what does this mean?

It means that if you wish to compile clients that link against the libpopt
DLL, you need to do nothing.  mingw-popt has been patched to support that
relatively cleanly.  However, if you wish to compile clients and link them
against the libpopt static library, you must:
  1) compile all clients with -DPOPT_STATIC
  2) link using "-Bstatic -lpopt -Bdynamic" (or simply "-static -lpopt")
Note that it is not recommended to link statically against libpopt on win32.
See below for more information.

An alternate approach to this problem was taken in Tor Lilqvist's port
of popt-1.10.2 for the Gnome project:
  http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/
In that case, Tor modified the API to *exclude* direct access to the
problematic variables entirely. He provided similar, but not identical,
functionality as that supported on Unix by the problematic variables, by
adding a bit of macro magic. I chose to use the GnuWin32 approach instead.

However, Tor's port also included (a) special handling for '/'-vs='\\'
issues, as well as "c:/" issues, which the GnuWin32 port does not, and
(b) "relocation" support, so that libpopt can locate its global configuration
file and user configuration files using Win32 idioms. This port DOES include
these improvements, updated and modernized.  One consequence of this, is
that it is not recommended to link against libpopt.a statically. If you do
so, then the "global" popt configuration file will be searched for starting
in the directory in which the *executable* resides, and NOT starting in the
directory in which libpopt-0.dll resides.

----------  popt-1.15-1 -- 2009 Sep 11 -----------
* First release of popt for mingw using new packaging standard.


